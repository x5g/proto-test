package xia;

enum XSocketCallType {
  XSOCKET = 1;
  XBIND = 2;
  XCLOSE = 3;
  XCONNECT = 4;
  XACCEPT = 5;
  XSENDTO = 6;
  XSEND = 7;
  XRECV = 8;
  XRECVFROM = 9;
  XSETSOCKOPT = 10;
  XGETSOCKOPT = 11;
  XPUTCHUNK = 12;
  XREQUESTCHUNK = 13;
  XGETCHUNKSTATUS = 14;
  XREADCHUNK = 15;
  XREMOVECHUNK =16;
  XREQUESTFAILED = 17;
  //XRESULT = 18;
  XCHANGEAD = 19;
  XREADLOCALHOSTADDR = 20;
  XUPDATENAMESERVERDAG = 21;
  XREADNAMESERVERDAG = 22;
  XISDUALSTACKROUTER = 23;
  XGETPEERNAME = 24;
  XGETSOCKNAME = 25;
  XGETMSG = 26;
  XREADYTOACCEPT = 27;
  XPUSHCHUNKTO = 28;
  XBINDPUSH = 29;
  XPOLL = 30;
  XRECVCHUNKFROM = 31;
  XLISTEN = 32;
  XUPDATERV = 33;
  XFORK = 34;
  XREPLAY = 35;
  XNOTIFY = 36;
}

message XSocketMsg {
  required XSocketCallType type = 1; // XIA Socket call type
  optional int32 sequence = 2;
  optional bool blocking = 3;
  optional uint32 port = 4;

  optional X_Socket_Msg x_socket= 5;
  optional X_Bind_Msg x_bind= 6;
  optional X_Close_Msg x_close= 7;
  optional X_Connect_Msg x_connect= 8;
  optional X_Accept_Msg x_accept= 9;
  optional X_Sendto_Msg x_sendto= 10;
  optional X_Send_Msg x_send= 11;
  optional X_Recv_Msg x_recv= 12;
  optional X_Recvfrom_Msg x_recvfrom= 13;
  optional X_Setsockopt_Msg x_setsockopt = 14;
  optional X_Getsockopt_Msg x_getsockopt = 15;

  optional X_Putchunk_Msg x_putchunk= 16;
  optional X_Requestchunk_Msg x_requestchunk= 17;
  optional X_Getchunkstatus_Msg x_getchunkstatus= 18;
  optional X_Readchunk_Msg x_readchunk= 19;
  optional X_Removechunk_Msg x_removechunk = 20;

  optional X_Requestfailed_Msg x_requestfailed= 21;
  optional X_Result_Msg x_result = 22;

  optional X_Changead_Msg x_changead = 23;
  optional X_ReadLocalHostAddr_Msg x_readlocalhostaddr = 24;
  optional X_Updatenameserverdag_Msg x_updatenameserverdag = 25;
  optional X_ReadNameServerDag_Msg x_readnameserverdag = 26;

  optional X_IsDualStackRouter_Msg x_isdualstackrouter = 27;
  optional X_GetPeername_Msg x_getpeername = 28;
  optional X_GetSockname_Msg x_getsockname = 29;

  optional X_Poll_Msg x_poll = 30;
  optional X_Pushchunkto_Msg x_pushchunkto= 31;
  optional X_BindPush_Msg x_bindpush= 32;
  optional X_Recvchunkfrom_Msg x_recvchunkfrom = 33;

  optional X_Updaterv_Msg x_updaterv = 34;
  optional X_Listen_Msg x_listen = 35;
  optional X_Fork_Msg x_fork = 36;
  optional X_Replay_Msg x_replay = 37;
  optional X_Notify_Msg x_notify = 38;
}

message X_Socket_Msg {
  required int32 type = 1; // Indicating the type of tranport (0: Reliable transport, 1: Unreliable transport)
  optional string temp = 2; // currently not used
}

message X_Bind_Msg {
  required string sdag = 1; // bind to src dag
}

message X_Close_Msg {
  required uint32 port = 1; // port of actual socket to close
  optional uint32 refcount = 2;// # of processes holding this socket open
  optional bool delkeys = 3;   // false if the socket was created by accept and
                               //   we should leave the keys intact
}

message X_Connect_Msg {
  enum ConnectStatus {
    XCONNECTING = 0;
	XCONNECTED = 1;
	XFAILED = 2;
  }

  required string ddag = 1; // connect to destination dag
  optional ConnectStatus status = 2;
  optional string sdag = 3; // source DAG, from bind or autogenerated
}

message X_Listen_Msg {
  required uint32 backlog = 1;
}

message X_Accept_Msg {
  optional string dag = 1; // peer's dag
  required uint32 new_port = 2; // the UDP port for the new API socket
  optional string remote_dag = 3;
}

message X_Sendto_Msg {
  required string ddag = 1; // dest dag
  optional bytes payload = 2; // data
}

message X_Send_Msg {
  optional bytes payload = 1; // data
}

message X_Recv_Msg {
  optional int32 flags = 1;
  optional bytes payload = 2;
  optional int32 bytes_requested = 3;
  optional int32 bytes_returned = 4; // necessary? this will be the result return code as well
}

message X_Recvfrom_Msg {
  optional int32 flags = 1;
  optional int32 interface_id = 2;
  optional string sender_dag = 3;
  optional bytes payload = 4;
  optional int32 bytes_requested = 5;
  optional int32 bytes_returned = 6; // necessary? this will be the result return code as well
}

message X_Setsockopt_Msg {
	required int32 opt_type = 1;
	optional int32 int_opt = 2;
	// we will likely have to add other optional fields as we add options in the future
}

message X_Getsockopt_Msg {
	required int32 opt_type = 1;
	optional int32 int_opt = 2;
	// we will likely have to add other optional fields as we add options in the future
}

message X_Putchunk_Msg {
  required int32 cachepolicy = 1;
  required int32 cachesize = 2;
  required int32 contextid = 3;
  required int32 TTL = 4;
  required bytes payload = 5; // data
  optional string cid = 6;
  optional int32 length = 7;
  optional int64 timestamp = 8;
}

message X_Requestchunk_Msg {
  repeated string dag = 1;
  optional bytes payload = 2; // data
}

message X_Getchunkstatus_Msg {
  repeated string dag = 1;
  repeated string status = 2;
  optional bytes payload = 3; // data
}

message X_Readchunk_Msg {
  required string dag = 1;
  optional bytes payload = 2;
}

message X_Removechunk_Msg {
    required int32 contextid =1 ;
	required string cid = 2;
	optional int32 status = 3;
}

message X_Result_Msg {
	optional int32 return_code = 1;	// same as a normal socket return code
	optional int32 err_code = 2;	// if ret_code is -1, contains related errno value
}

message X_Requestfailed_Msg {
  optional int32 type = 1; // Indicating the type of error (to be defined)
  optional string temp = 2; // currently not used
}

message X_Changead_Msg {
  required string ad = 1;
  optional string ip4id = 2;
}

message X_ReadLocalHostAddr_Msg {
  optional string ad = 1;
  optional string hid = 2;
  optional string ip4id = 3;
}

message X_Updatenameserverdag_Msg {
  required string dag = 1;
}

message X_ReadNameServerDag_Msg {
  optional string dag = 1;
}

message X_IsDualStackRouter_Msg {
  optional int32 flag = 1; // Indicating if this node is an XIA-IPv4 dual-stack router
}


message X_GetPeername_Msg {
  optional string dag = 1; // Full DAG of the remote socket
}

message X_GetSockname_Msg {
  optional string dag = 1; // Full DAG of the this socket
}

message X_Poll_Msg {
  
  message PollFD {
    required int32 port = 1;
    required uint32 flags = 2;
  }
  enum MsgType {
    DOPOLL = 1;
    CANCEL = 2;
    RESULT = 3;
  };
  required MsgType type = 1;
  required int32 nfds = 2;
  repeated PollFD pfds = 3;
}

message X_Updaterv_Msg {
  required string rvdag = 1;
}

/**************************************************/

message msg {
  optional int32 appid = 1;  // port number?
  optional bytes xid = 2;
  optional string xiapath_src = 5;
  optional string xiapath_dst = 6;
  optional bytes payload = 3;
  enum MsgType {
    GETLOCALHID = 0;
    GETCID = 1;
    CONNECTSID = 2;
    PUTCID = 3;
    SERVESID = 4;
/*** IS THIS NECESSARY? ***/
    PUSHTOCID = 5;
  }
  optional MsgType type = 4;

}

message msg_response {
  required int32 appid = 1;
  repeated bytes xid = 2;   // can be a list of CID's
  optional string payload = 3;  // bytes or string?
}
 

message X_Pushchunkto_Msg {
  required string ddag = 1; // dest dag
  required int32 cachepolicy = 2;
  required int32 cachesize = 3;
  required int32 contextid = 4;
  required int32 TTL = 5;
  required bytes payload = 6; // data
  required string cid = 7;
  required int32 length = 8;
  optional int64 timestamp = 9; 
}

message X_Recvchunkfrom_Msg {
  optional string ddag = 1;
  optional int32 cachepolicy = 2;
  optional int32 cachesize = 3;
  optional int32 contextid = 4;
  optional int32 TTL = 5;
  optional bytes payload = 6; // data
  optional string cid = 7;
  optional int32 length = 8;
  optional int64 timestamp = 9; 
}

message X_Fork_Msg {
  optional bool increment = 1;
  optional uint32 count = 2;
  repeated uint32 ports = 3;
}

message X_BindPush_Msg {
  required string sdag = 1; // bind to src dag 
} 

message X_Replay_Msg {
  required XSocketCallType type = 1; // type of message we are replaying
  optional int32 sequence = 2;
}

message X_Notify_Msg {
  optional int32 status = 1; // placeholder for now
}
