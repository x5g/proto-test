// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


syntax = "proto3";

package pb;

// option go_package="github.com/tcncloud/protoc-gen-persist/examples/user_sql/pb;pb";
// if we wanted to generate persist implementation in a different package than our go
// implementation.  we would need to put (persist.package) = "path/for/my/impl;impl_package";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";
import "imports/imported.proto";
import "pb/user.proto";

message EUser {
    int64 id = 1;
    string name = 2;
    Friends friends = 3;
    google.protobuf.Timestamp created_on = 4;
    int32 id2 = 5;
    repeated int64 counts = 7;

}

service ExtraServ {
    option (persist.service_type) = SQL;
    option (persist.mapping) = {
        types: [{
            proto_type_name: ".google.protobuf.Timestamp",
            proto_type: TYPE_MESSAGE,
        },{
            proto_type_name: ".pb.SliceStringParam",
            proto_type: TYPE_MESSAGE,
        }, {
            proto_type: TYPE_INT64,
            proto_label: LABEL_REPEATED,
        }]
    };
    option (persist.ql) = {
        queries: [{
            name: "extra_create_users_table",
            query: ["CREATE TABLE users(id integer PRIMARY KEY, name VARCHAR(50), friends BYTEA,",
                    "created_on VARCHAR(50), id2 SMALLINT, counts []BIGINT)"],
            pm_strategy: "$",
            in: ".pb.Empty",
            out: ".pb.Empty",
        }, {
            name: "extra_get_all_users",
            query: ["SELECT id, name, friends, created_on, id2 FROM users"],
            in: ".pb.Empty",
            out: ".pb.User",
        }, {
            name: "extra_select_user_by_id",
            query: ["SELECT id, name, friends, created_on, id2 FROM users WHERE id = @id"],
            pm_strategy: "$",
            in: ".pb.User",
            out: ".pb.User",
        }, {
            name: "extra_update_user_name",
            query: ["Update users set name = @name WHERE id = @id ",
                    "RETURNING id, name, friends, created_on"],
            pm_strategy: "$",
            in: ".pb.User",
            out: ".pb.User",
        }]
    };
    rpc CreateTable(Empty) returns (Empty) {
        option (persist.opts) = {
            query: "extra_create_users_table",
        };
    };
    rpc TTTT(google.protobuf.Timestamp) returns (Empty) {
        option (persist.opts) = {
            query: "extra_create_users_table",
        };
    };
    rpc EEEE(google.protobuf.Timestamp) returns (Empty);
    rpc IIII(imports.Imported) returns (Empty) {
        option (persist.opts) = {
            query: "extra_create_users_table",
        };
    };
    rpc GetAllUsers(Empty) returns (stream User) {
        option (persist.opts) = {
            query: "extra_get_all_users",
            after: true,
            before: true,
        };
    };
    rpc SelectUserById(User) returns (User) {
        option (persist.opts) = { query: "extra_select_user_by_id", };
    };
    rpc UpdateAllNames(Empty) returns (stream User) {};
}