syntax = "proto3";

package protobuf;

// Valid schema types
enum SchemaType {
	PEDERSEN = 0;
	PEDERSEN_EC = 1;
	SCHNORR = 2;
	SCHNORR_EC = 3;
	CSPAILLIER = 4;
	PSEUDONYMSYS_CA = 5;
	PSEUDONYMSYS_NYM_GEN = 6;
	PSEUDONYMSYS_ISSUE_CREDENTIAL = 7;
	PSEUDONYMSYS_TRANSFER_CREDENTIAL = 8;
	PSEUDONYMSYS_CA_EC = 9;
	PSEUDONYMSYS_NYM_GEN_EC = 10;
	PSEUDONYMSYS_ISSUE_CREDENTIAL_EC = 11;
	PSEUDONYMSYS_TRANSFER_CREDENTIAL_EC = 12;
}

// Valid schema variants
enum SchemaVariant {
	SIGMA = 0;	// Sigma protocol only. This is the default - if you don't specify schema variant, sigma will be used
	ZKP = 1;	// Zero knowledge proof
	ZKPOK = 2;	// Zero knowledge proof of knowledge
}

// A generic message
message Message {
	SchemaType schema = 1;
	SchemaVariant schema_variant = 2;
	oneof content {
		EmptyMsg empty = 3;
		BigInt bigint = 4;
		ECGroupElement ec_group_element = 5;
		Status status = 6;
		PedersenFirst pedersen_first = 7;
		PedersenDecommitment pedersen_decommitment = 8;
		SchnorrProofData schnorr_proof_data = 9;
		SchnorrProofRandomData schnorr_proof_random_data = 10;
		SchnorrECProofRandomData schnorr_ec_proof_random_data = 11;
		CSPaillierOpening cs_paillier_opening = 12;
		CSPaillierProofData cs_paillier_proof_data = 13;
		CSPaillierProofRandomData cs_paillier_proof_random_data = 14;
		PseudonymsysCACertificate pseudonymsys_ca_certificate = 15;
		PseudonymsysNymGenProofRandomData pseudonymsys_nym_gen_proof_random_data = 16;
		PseudonymsysIssueProofRandomData pseudonymsys_issue_proof_random_data = 17;
		DoubleBigInt double_bigint = 18;
		PseudonymsysTransferCredentialData pseudonymsys_transfer_credential_data = 19;
		PseudonymsysCACertificateEC pseudonymsys_ca_certificate_ec = 20;
		PseudonymsysNymGenProofRandomDataEC pseudonymsys_nym_gen_proof_random_data_ec = 21;
		PseudonymsysIssueProofRandomDataEC pseudonymsys_issue_proof_random_data_ec = 22;
		PseudonymsysTransferCredentialDataEC pseudonymsys_transfer_credential_data_ec = 23;
	}
	int32 clientId = 24;
	string ProtocolError = 25;
}

// A generic service
service Protocol {
	rpc Run (stream Message) returns (stream Message) {}
}

message EmptyMsg {}

message Status {
	bool Success = 1;
}

message BigInt {
	bytes X1 = 1;
}

message DoubleBigInt {
	bytes X1 = 1;
	bytes X2 = 2;
}

message PedersenFirst {
	bytes H = 1;
}

message PedersenDecommitment {
	bytes X = 1;
 	bytes R = 2;
}

message ECGroupElement {
	bytes X = 1;
 	bytes Y = 2;
}

message SchnorrProofRandomData {
	bytes X = 1;
	bytes A = 2;
	bytes B = 3;
}

message SchnorrECProofRandomData {
	ECGroupElement X = 1;
	ECGroupElement A = 2;
	ECGroupElement B = 3;
}

message SchnorrProofData {
	bytes Z = 1;
 	bytes Trapdoor = 2; // needed only in zero-knowledge proof of knowledge
}

message PseudonymsysNymGenProofRandomData {
	bytes X1 = 1;
	bytes A1 = 2;
	bytes B1 = 3;
	bytes X2 = 4;
	bytes A2 = 5;
	bytes B2 = 6;
	bytes R = 7;
	bytes S = 8;
}

message PseudonymsysNymGenProofRandomDataEC {
	ECGroupElement X1 = 1;
	ECGroupElement A1 = 2;
	ECGroupElement B1 = 3;
	ECGroupElement X2 = 4;
	ECGroupElement A2 = 5;
	ECGroupElement B2 = 6;
	bytes R = 7;
	bytes S = 8;
}

message PseudonymsysCACertificate {
	bytes BlindedA = 1;
	bytes BlindedB = 2;
	bytes R = 3;
	bytes S = 4;
}

message PseudonymsysCACertificateEC {
	ECGroupElement BlindedA = 1;
	ECGroupElement BlindedB = 2;
	bytes R = 3;
	bytes S = 4;
}

message PseudonymsysIssueProofRandomData {
	bytes X11 = 1;
	bytes X12 = 2;
	bytes X21 = 3;
	bytes X22 = 4;
	bytes A = 5;
	bytes B = 6;
}

message PseudonymsysIssueProofRandomDataEC {
	ECGroupElement X11 = 1;
	ECGroupElement X12 = 2;
	ECGroupElement X21 = 3;
	ECGroupElement X22 = 4;
	ECGroupElement A = 5;
	ECGroupElement B = 6;
}

message PseudonymsysTranscript {
	bytes A = 1;
	bytes B = 2;
	bytes Hash = 3;
	bytes ZAlpha = 4;
}

message PseudonymsysTranscriptEC {
	ECGroupElement A = 1;
	ECGroupElement B = 2;
	bytes Hash = 3;
	bytes ZAlpha = 4;
}

message PseudonymsysCredential {
	bytes SmallAToGamma = 1;
	bytes SmallBToGamma = 2;
	bytes AToGamma = 3;
	bytes BToGamma = 4;
    PseudonymsysTranscript T1 = 5;
	PseudonymsysTranscript T2 = 6;
}

message PseudonymsysCredentialEC {
	ECGroupElement SmallAToGamma = 1;
	ECGroupElement SmallBToGamma = 2;
	ECGroupElement AToGamma = 3;
	ECGroupElement BToGamma = 4;
    PseudonymsysTranscriptEC T1 = 5;
	PseudonymsysTranscriptEC T2 = 6;
}

message PseudonymsysTransferCredentialData {
	string OrgName = 1;
	bytes X1 = 2;
	bytes X2 = 3;
	bytes NymA = 4;
	bytes NymB = 5;
	PseudonymsysCredential Credential = 6;	
}

message PseudonymsysTransferCredentialDataEC {
	string OrgName = 1;
	ECGroupElement X1 = 2;
	ECGroupElement X2 = 3;
	ECGroupElement NymA = 4;
	ECGroupElement NymB = 5;
	PseudonymsysCredentialEC Credential = 6;	
}

message CSPaillierSecretKey {
	bytes N = 1;
	bytes G = 2;
	bytes X1 = 3;
	bytes X2 = 4;
	bytes X3 = 5;
	bytes DLogP = 6;
	bytes DLogG = 7;
	bytes DLogQ = 8;
	bytes VerifiableEncGroupN = 9;
	bytes VerifiableEncGroupG1 = 10;
	bytes VerifiableEncGroupH1 = 11;
	int32 K = 12;
	int32 K1 = 13;
}

message CSPaillierPubKey {
	bytes N = 1;
	bytes G = 2;
	bytes Y1 = 3;
	bytes Y2 = 4;
	bytes Y3 = 5;
	bytes DLogP = 6;
	bytes DLogG = 7;
	bytes DLogQ = 8;
	bytes VerifiableEncGroupN = 9;
	bytes VerifiableEncGroupG1 = 10;
	bytes VerifiableEncGroupH1 = 11;
	int32 K = 12;
	int32 K1 = 13;
}

message CSPaillierOpening {
	bytes U = 1;
	bytes E = 2;
	bytes V = 3;
	bytes Delta = 4;
	bytes Label = 5;
	bytes L = 6;
}

message CSPaillierProofRandomData {
	bytes U1 = 1;
	bytes E1 = 2;
	bytes V1 = 3;
	bytes Delta1 = 4;
	bytes L1 = 5;
}

message CSPaillierProofData {
	bytes RTilde = 1;
	bool RTildeIsNeg = 2;
	bytes STilde = 3;
	bool STildeIsNeg = 4;
	bytes MTilde = 5;
	bool MTildeIsNeg = 6;
}
