//BAD!!! DON'T START NAMES WITH NEW OR COPY

import "Battle.proto";
import "Clan.proto";
import "MonsterStuff.proto";
import "SharedEnumConfig.proto";
import "User.proto";

package com.lvl6.proto;

option java_outer_classname = "EventClanProto";
//DO NOT USE ID AS THE NAME OF A PROPERTY IN ANY PROTO


message CreateClanRequestProto {
	optional MinimumUserProto sender = 1;
	optional string name = 2;
	optional string tag = 3;
	optional bool requestToJoinClanRequired = 4;
	optional string description = 5;
	optional int32 clanIconId = 6;
	
	//if user needs, say, five more cash, then user can spend gems to replace
	//said five cash. (positive number, server will convert it to negative)
	optional int32 gemsSpent = 7;
	
	//positive means refund, negative means charge user
	optional sint32 cashChange = 8;
}

message CreateClanResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional MinimumClanProto clanInfo = 3;	
	
}

//------------------------------------------------------------------------------------------

//if no newOwner set, assume wanting to delete
message LeaveClanRequestProto {
	optional MinimumUserProto sender = 1;
}

message LeaveClanResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	

}

//------------------------------------------------------------------------------------------

message RequestJoinClanRequestProto {
	optional MinimumUserProto sender = 1;
	optional string clanUuid = 2;
	optional int64 clientTime = 3;
}

//since clanless user can directly join open clan,
//two successes: request_success, join_success
message RequestJoinClanResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional string clanUuid = 3;
	optional MinimumUserProtoForClans requester = 4;
	optional MinimumClanProto minClan = 5;
	optional FullClanProtoWithClanSize fullClan = 6;

	//these are only set if the user joins an open clan, the current raid info	
	optional PersistentClanEventClanInfoProto eventDetails = 7;
	repeated PersistentClanEventUserInfoProto clanUsersDetails = 8;
	
	optional UserCurrentMonsterTeamProto requesterMonsters = 9;
	
	optional int64 clientTime = 10;
	
}

//------------------------------------------------------------------------------------------

message RetractRequestJoinClanRequestProto {
	optional MinimumUserProto sender = 1;
	optional string clanUuid = 2;
}

message RetractRequestJoinClanResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional string clanUuid = 3;
	
}	

//------------------------------------------------------------------------------------------

//can request as many as you like. wipe out other ones
message ApproveOrRejectRequestToJoinClanRequestProto {
	optional MinimumUserProto sender = 1;
	optional string requesterUuid = 2;
	optional bool accept = 3;
}

message ApproveOrRejectRequestToJoinClanResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional MinimumUserProto requester = 3;
	optional bool accept = 4;
	optional MinimumClanProto minClan = 5;
	optional FullClanProtoWithClanSize fullClan = 6;

}

//------------------------------------------------------------------------------------------

message RetrieveClanInfoRequestProto {
	optional MinimumUserProto sender = 1;
	optional string clanUuid = 2;
	optional string clanName = 3;
	optional ClanInfoGrabType grabType = 4;
	//switch to UUIDs makes this obsolete; consider repeated string blackListIds or date
	optional int32 beforeThisClanId = 5 [deprecated = true];  
	optional bool isForBrowsingList = 6;
	
	enum ClanInfoGrabType {
		ALL = 1;
		CLAN_INFO = 2;
		MEMBERS = 3;
	}

}

message RetrieveClanInfoResponseProto {
	optional MinimumUserProto sender = 1;
	repeated MinimumUserProtoForClans members = 2;
	repeated FullClanProtoWithClanSize clanInfo = 3;
	optional ResponseStatus status = 4;
	optional bool isForSearch = 5;
	optional bool isForBrowsingList = 6;
	optional string clanUuid = 7;
	optional string clanName = 8;
	optional int32 beforeThisClanId = 9 [deprecated = true];
	repeated UserCurrentMonsterTeamProto monsterTeams = 10;
	
}

//------------------------------------------------------------------------------------------

message TransferClanOwnershipRequestProto {
	optional MinimumUserProto sender = 1;
	optional string clanOwnerUuidNew = 2;
}

message TransferClanOwnershipResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional MinimumClanProto minClan = 3;
	optional FullClanProtoWithClanSize fullClan = 4;
	
	optional MinimumUserProto clanOwnerNew = 5;
	
}

//------------------------------------------------------------------------------------------

message BootPlayerFromClanRequestProto {
	optional MinimumUserProto sender = 1;
	optional string playerToBootUuid = 2;
}

message BootPlayerFromClanResponseProto {
     optional MinimumUserProto sender = 1;
	 optional MinimumUserProto playerToBoot = 2;
	 optional ResponseStatus status = 3;
     
}

//------------------------------------------------------------------------------------------

//cramming change clan description and change clan join type and change clan icon
//send to all clan members
message ChangeClanSettingsRequestProto {
	optional MinimumUserProto sender = 1;
	
	optional bool isChangeDescription = 2;
	optional string descriptionNow = 3;
	
	//from an open (no request to join necessary) to request to join necessary
	optional bool isChangeJoinType = 4;
	optional bool requestToJoinRequired = 5;
	
	optional bool isChangeIcon = 6;
	optional int32 iconId = 7;
}

message ChangeClanSettingsResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	
	optional MinimumClanProto minClan = 3;
	optional FullClanProtoWithClanSize fullClan = 4;
	
	//SUCCESS : if all requested changes succeed 
	//FAIL_OTHER: if one requested change fails, but server still process all of them
	
}

//------------------------------------------------------------------------------------------

//a clan can only have at max one clan raid/event going on at once.
//this event used to either begin a clan raid or set a user's monsters OR start 
//another stage in the raid (just setting the stage start time)
message BeginClanRaidRequestProto {
	optional MinimumUserProto sender = 1;
	optional int64 curTime = 2;
	//Example. If 7 raids and numbered 1-7, raidId is one of these numbers
	optional int32 raidId = 3; //should always be set
	optional int32 clanEventId = 7;
	
	//either set monsters or begin the clan raid
	optional bool setMonsterTeamForRaid = 4;
	repeated FullUserMonsterProto userMonsters = 5;
	optional bool isFirstStage = 6; 
	
	//optional int32 clanEventId = 7; //set above
}

	//send to every clan member that raid started
message BeginClanRaidResponseProto {
	optional MinimumUserProto sender = 1;
	
	//in the context of other events
	//must be sent every time user wants to attack a clan raid stage monster or end a raid
	optional PersistentClanEventClanInfoProto eventDetails = 2;
	
	optional ResponseStatus status = 3;
	
	optional PersistentClanEventUserInfoProto userDetails = 4;
	
}

//------------------------------------------------------------------------------------------

//Every time this request is sent, regardless of the AttackClanRaidMonsterStatus,
//the user's monsters' healths will change. In a sense, all of these requests will
//be successful but might not updatate the user's clan raid contribution 
//(i.e. do damage to the monster)
message AttackClanRaidMonsterRequestProto {
	optional MinimumUserProto sender = 1;
	
	//must be sent every time user wants to attack a clan raid stage monster or end a raid
	//clan raid stage monster info will be updated when current monster is beaten
	optional PersistentClanEventClanInfoProto eventDetails = 2;
	optional int64 clientTime = 3;
	
	//positive number
	optional int32 damageDealt = 4;
	//health of user's monsters
	repeated UserMonsterCurrentHealthProto monsterHealths = 5;
	
	optional FullUserMonsterProto userMonsterThatAttacked = 9;
	
	//when user attacks, server is going to create a PersistentClanEventUserInfoProto
	//for this user, so need the team
	optional UserCurrentMonsterTeamProto userMonsterTeam = 10; 
}

//will be sent to everyone in the clan
message AttackClanRaidMonsterResponseProto {
	optional MinimumUserProto sender = 1;
	optional int32 dmgDealt = 2;
	
	//this will be what the same info as what is in the db, when current monster is beaten
	//if clan raid ends, won't send this. Basically, server should always set this
	optional PersistentClanEventClanInfoProto eventDetails = 3;
	
	//this will be what the same info as what is in the db, when current monster is beaten
	//if clan raid ends, won't send this. Basically, server might not set this
	repeated PersistentClanEventUserInfoProto clanUsersDetails = 4;
	
	optional FullUserMonsterProto userMonsterThatAttacked = 5;
	optional ResponseStatus status = 6;
	
}

message AwardClanRaidStageRewardResponseProto {
	//the rewards for the stage that was just completed
	optional int32 crsId = 1;
	repeated PersistentClanEventUserRewardProto allRewards = 2;
}

//------------------------------------------------------------------------------------------

//sent in order to move all the current clan raid info into history (including clan users' info)
//if user receives out of date clan raid info (in startup), this event will be sent
//or if a clan raid stage timer ends
//TODO: MAKE SURE THAT IF THE MONSTER IS DEAD THEN DON'T DO ANYTHING
message RecordClanRaidStatsRequestProto {
	optional MinimumUserProto sender = 1;
	optional string clanUuid = 2;
	optional int64 clientTime = 3;
}

message RecordClanRaidStatsResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2; 

	// FAIL_MONSTER_ALREADY_DEAD :even though time ended, clan still progresses to next stage

}

//------------------------------------------------------------------------------------------

message PromoteDemoteClanMemberRequestProto {
	optional MinimumUserProto sender = 1;
	optional string victimUuid = 2;
	optional UserClanStatus userClanStatus = 3 [default = MEMBER];
}

message PromoteDemoteClanMemberResponseProto {
	optional MinimumUserProto sender = 1;
	optional MinimumUserProto victim = 2;
	optional UserClanStatus userClanStatus = 3 [default = MEMBER];
	optional UserClanStatus prevUserClanStatus = 5 [default = MEMBER];
	
	optional ResponseStatus status = 4;
	
}

//------------------------------------------------------------------------------------------

message SolicitClanHelpRequestProto {
	optional MinimumUserProto sender = 1;
	repeated ClanHelpNoticeProto notice = 2;
	optional int64 clientTime = 4;
	optional int32 maxHelpers = 5;
}

message SolicitClanHelpResponseProto {
	optional MinimumUserProto sender = 1;
	repeated ClanHelpProto helpProto = 2;
	optional ResponseStatus status = 3; 
	
	//SEND TO ALL CLAN MEMBERS IF SUCCESS
	
}

//------------------------------------------------------------------------------------------

message GiveClanHelpRequestProto {
	optional MinimumUserProto sender = 1;
	repeated string clanHelpUuids = 2;
	
}

message GiveClanHelpResponseProto {
	optional MinimumUserProto sender = 1;
	repeated ClanHelpProto clanHelps = 2;
	optional ResponseStatus status = 3; 
	
	//SEND TO ALL CLAN MEMBERS ON SUCCESS

}

//------------------------------------------------------------------------------------------

message EndClanHelpRequestProto {
	optional MinimumUserProto sender = 1;
	repeated string clanHelpUuids = 2;
}

message EndClanHelpResponseProto {
	optional MinimumUserProto sender = 1;
	repeated string clanHelpUuids = 2;
	
	optional ResponseStatus status = 3;
	//SEND TO ALL CLAN MEMBERS ON SUCCESS
	
}

//------------------------------------------------------------------------------------------

//this controller is not in use
message InviteToClanRequestProto {
	optional MinimumUserProto sender = 1;
	optional string prospectiveMember = 2;
	optional int64 clientTime = 3;
}

message InviteToClanResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional ClanInviteProto invite = 3;

}

message AcceptOrRejectClanInviteRequestProto {
	optional MinimumUserProto sender = 1;
	
	//NOTE: only really need inviteId, but would like clanId as well
	optional ClanInviteProto accepted = 2;
	repeated ClanInviteProto rejected = 3;
	optional int64 clientTime = 4;
}

message AcceptOrRejectClanInviteResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional FullClanProtoWithClanSize fullClan = 3;
	 
	//send to clan only if accept
	
}

//------------------------------------------------------------------------------------------

//sent to the newbies that just join a clan
message RetrieveClanDataResponseProto {
	optional MinimumUserProto mup = 1; //the new person that joined a clan
	optional ClanDataProto clanData = 2;
}

//------------------------------------------------------------------------------------------

message BeginClanAvengingRequestProto {
	optional MinimumUserProto sender = 1;
	repeated PvpHistoryProto recentNBattles = 2;
	optional int64 clientTime = 3;
}

message BeginClanAvengingResponseProto {
	optional MinimumUserProto sender = 1;
	repeated PvpClanAvengeProto clanAvengings = 2;
	optional ResponseStatus status = 3;
	
	//SEND TO CLAN
}

//------------------------------------------------------------------------------------------

message EndClanAvengingRequestProto {
	optional MinimumUserProto sender = 1;
	//primary key in clan_avenge table
	repeated string clanAvengeUuids = 2; 
}

message EndClanAvengingResponseProto {
	optional MinimumUserProto sender = 1;
	repeated string clanAvengeUuids = 2;	
	optional ResponseStatus status = 3;

	//SEND TO WHOLE CLAN
	
}

//------------------------------------------------------------------------------------------

message AvengeClanMateRequestProto {
	optional MinimumUserProto sender = 1;
	//don't need to set value for "repeated PvpUserClanAvengeProto usersAvenging = 2;"
	optional PvpClanAvengeProto clanAvenge = 2;
	optional int64 clientTime = 3;
}

message AvengeClanMateResponseProto {
	optional MinimumUserProto sender = 1;
	optional PvpProto victim = 2 [deprecated = true]; //call RetrieveUserMonsterTeamRequestProto in EventClan.proto instead
	optional ResponseStatus status = 3;
	
}

//------------------------------------------------------------------------------------------

message SolicitTeamDonationRequestProto {
	optional MinimumUserProto sender = 1;
	optional string msg = 2;
	optional int32 powerLimit = 3;
	optional int64 clientTime = 4;
   
	//within some time after soliciting clan, exists a fee to resolicit 
	//(positive number, server will convert it to negative)
	optional int32 gemsSpent = 5; 
}

message SolicitTeamDonationResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	
	optional ClanMemberTeamDonationProto solicitation = 3;
	
}

//------------------------------------------------------------------------------------------

message FulfillTeamDonationSolicitationRequestProto {
	optional MinimumUserProto sender = 1;
	optional FullUserMonsterProto fump = 2;
	optional int64 clientTime = 3;
	
	//lock on the solicitor
	optional ClanMemberTeamDonationProto solicitation = 4; 
}

message FulfillTeamDonationSolicitationResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	optional ClanMemberTeamDonationProto solicitation = 3;

}

//------------------------------------------------------------------------------------------

message VoidTeamDonationSolicitationRequestProto {
	optional MinimumUserProto sender = 1;
	repeated ClanMemberTeamDonationProto solicitations = 2;
}

message VoidTeamDonationSolicitationResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;
	repeated string clanTeamDonateUuid = 3;

}

//------------------------------------------------------------------------------------------
/*
message CollectClanGiftsRequestProto {
	optional MinimumUserProto sender = 1;
	//repeated UserClanGiftProto userClanGift = 2;
	repeated UserGiftProto userGift = 2;
}

message CollectClanGiftsResponseProto {
	optional MinimumUserProto sender = 1;
	optional UserRewardProto reward = 2;
	optional ResponseStatus status = 3;

}
*/
//------------------------------------------------------------------------------------------
/*
message DeleteClanGiftsRequestProto {
	optional MinimumUserProto sender = 1;
	//repeated UserClanGiftProto expiredGifts = 2;
	repeated UserGiftProto expiredGifts = 2;
}

message DeleteClanGiftsResponseProto {
	optional MinimumUserProto sender = 1;
	optional ResponseStatus status = 2;

}
*/
//------------------------------------------------------------------------------------------
/*
message ReceivedClanGiftResponseProto {
	optional MinimumUserProto sender = 1;  //person who gave out the gift to everyone
	optional ChatScope scope = 2 [default = CLAN];
	//repeated UserClanGiftProto userClanGifts = 3;
	repeated UserGiftProto userGifts = 3;
}
*/
