package peercentrum;

option java_package = "org.peercentrum.core";
option java_outer_classname = "PB";

message HeaderMsg {
	optional uint32 requestNumber=2; 
	optional bytes destinationApplicationId=3;
	//Notice there is no payload in the protobuf message. It is simply appended as a multipart message
	optional uint32 applicationSpecificBlockLength=5;
	optional uint32 applicationSpecificStreamLength=6;
};

message NodeMetaDataMsg { //FIXME Get rid of all this crap, create endpoint message...
  optional string userAgent=1;
  optional string externalIP=2;
  optional uint32 externalPort=3;
  repeated bytes applicationsSupported=5;
};

message NetworkMessage {
	enum NetworkOperation {
		CLOSE_CONNECTION=0;
		PING=1;
		PONG=2;
	}
	optional NetworkOperation operation=1;
	optional NodeMetaDataMsg nodeMetaData=2;
};

//Gossip application
message GossipMessage {
  optional GossipRequestMorePeers requestMorePeers=1;
  optional GossipReplyMorePeers reply=2;
};

message GossipRequestMorePeers {
  repeated bytes applicationsRequested=1; //If omited, return a bunch of peers
};

message GossipReplyMorePeers {
	repeated PeerEndpointMsg peers=1;
};

message PeerEndpointMsg {
	message TLSEndpointMsg {
		optional string ipAddress=1;
		optional uint32 port=2;
	};
	message TOREndpointMsg {
		optional string TORAddress=1;
	};
	optional bytes identity=1;
	optional TLSEndpointMsg tlsEndpoint=2;
};

message GenericResponse {
  optional uint32 errorCode=1;
  optional string errorMessage=2;
};

/////////////////////////////HashToPublicKey application

message HashToPublicKeyMessage {
  optional GenericResponse genericResponse=1;
  optional H2PKProposedTransactions proposedTx=2;
  
  //Typically, only the client would use these fields
  optional HashToPublicKeyTransaction localTransaction=3;
  optional bytes membershipQuery=4;
  repeated bytes membershipResponse=5;

  optional H2PKDBSyncQuery dbSyncQuery=6;
  optional H2PKDBSyncResponse dbSyncResponse=7;
};

message HashToPublicKeyTransaction {
  enum OPERATION {
    APPEND=0;
    REMOVE=1;
  }
  optional OPERATION operation=1;
  optional bytes address=2;
  optional bytes publicKey=3;
  optional bytes signature=4;
  optional uint32 expiration=5;
  optional uint32 nonce=6;
};

message H2PKProposedTransactions {
  optional uint32 dbVersionNumber=1;
  optional bytes proposedBy=2;
  repeated HashToPublicKeyTransaction proposedTransactions=3;
};

message H2PKDBSyncQuery {
  optional uint32 beginDbVersionNumber=1;
};

message H2PKDBSyncResponse {
  optional uint32 lastDbVersionNumber=1;
  optional bytes lastDbHashValue=2;

  optional uint32 syncDbVersionNumber=3;
  repeated H2PKDBSyncUnit syncUnits=4;
};

message H2PKDBSyncUnit {
	optional bytes address=1;
	repeated bytes publicKeysRegistered=2;
};


//////////////P2PBlob /////////////////
message P2PBlobRequestMsg {
	repeated P2PBlobBlobRequestMsg blobRequest=1;
	repeated P2PBlobUploadRequestMsg uploadRequest=2;
};

message P2PBlobUploadRequestMsg {
//  optional bytes blobHash=1;
  repeated P2PBlobBlockMsg blocks=2;
  optional P2PBlobMetaDataMsg metaData=3;
};

message P2PBlobBlobRequestMsg {
  optional bytes requestedHash=1;
  //Maybe a maximumBlobHintLength? Malicious blob with huge hint could be a problem?
  
  /*Maximum number of bytes the response may return. If the blobBytes exceed this, 
    no P2PBlobResponse.blobBytes are returned, but the other fields are returned. If set to 0,
    no P2PBlobResponse.blobBytes will be returned. The goal is to avoid the extra back and forth
    to check the size of the blob before downloading it.
  */
  optional int64 maximumBlobLengthAccepted=2;
  optional bool requestMetaData=3;       //Asks the server to provide the blob's metadata
  optional bool requestBlockInventory=5; //Asks the server to provide a list of blocks they have 
  repeated P2PBlobRangeMsg requestedRanges=6; //What blocks do we want from the server
};

message P2PBlobResponseMsg {
  optional GenericResponse genericResponse=1;
  optional P2PBlobMetaDataMsg metaData=2;         //Set if P2PBlobRequest.requestHashList is set to true
  repeated P2PBlobRangeMsg localBlockInventory=3; //Set if P2PBlobRequest.requestBlockInventory is set to true, or if the server wishes the client to pay
  repeated P2PBlobBlockMsg blobBytes=4;   		 //The actual block bytes
  optional P2PBlobDataTransferQuoteMsg dataTransferQuote=5; //Set only if the server wishes the client to pay
};

message P2PBlobRangeMsg {
  optional uint32 begin=1; //Range is inclusive
  optional uint32 end=2; //Range is inclusive
};

message P2PBlobMetaDataMsg {
  optional int64 blobLength=1; //Hash the length as the first element of the blob hash
  optional int32 blockSize=2;  //This is part of the top level hash too
  optional P2PBlobHashListMsg hashList=3;
};

message P2PBlobHashListMsg{
	repeated bytes hashOfEachBlock=1;
};

message P2PBlobBlockMsg {
	optional uint32 blockIndex=1;
	optional bytes blobBytes=2;
};

/**
 * This message is returned to the client when the server wants the client to pay.
 * We could make this a lot more complex: Using a  specialized message that represents a quote, which the
 * client signs (turning it into an invoice). The user can lay claim to bytes of a specified file & whatnot.
 * Let's start simple by simply sending our prices
 */
message P2PBlobDataTransferQuoteMsg {
  optional int64 satoshiPerIncomingGigaByte=1; //Bytes going to the server
  optional int64 satoshiPerOutgoingGigaByte=2; //Bytes coming from the server
//  optional uint32 maximumIncomingBytesPerSecond=3;
//  optional uint32 maximumOutgoingBytesPerSecond=4;
};

/*
message SettlementTermOfServiceByteStorage {
  optional bytes pricePerBytePerPeriod=1;
  optional uint32 storagePeriodInSeconds=2; //Per Hour, Per day,Per month?

  optional int64 minimumNumberOfBytes=3; //To create usage tiers
  optional uint32 recoveryDelayInSeconds=5; //How much time may elapse before we return the data 
};
*/

/////////////// Settlement ////////////////

//import "paymentchannel.proto";
//
//message SettlementMsg {
//	repeated paymentchannels.TwoWayChannelMessage twoWayChannelMsg=1;
//};


////////////////// DHT ////////////////////
message DHTTopLevelMsg {
  optional DHTPingMsg ping=1;

  repeated DHTFindMsg find=2;
  repeated DHTFoundMsg found=3;
	
	repeated DHTStoreValueMsg storeValue=4;
};

message DHTPingMsg {
};

message DHTFindMsg {
  optional bytes keyCriteria=1;
  optional uint32 numberOfNodesRequested=2;
};

message DHTFoundMsg {
  repeated PeerEndpointMsg closestNodes=1; //Number of elements should not exceed DHTFindMsg.numberOfNodesRequested
  optional bytes value=2;
};

////////////// SelfRegistration DHT /////////
message DHTReservationMsg { //See https://github.com/vinced/namecoin/blob/master/DESIGN-namecoin.md
  optional bytes reservationHash=1;
  optional bytes keyOwner=2;
  optional bytes initialValue=3;
};

message DHTUpdateValueMsg {
  optional bytes keyToUpdate=1;
  optional bytes firstTimeRandom=2;
  optional uint32 sequence=3;
  optional bytes newValue=4;
};

message DHTStoreValueMsg { //This is more akin to a transaction than a command.
  optional bytes key=1;
  optional uint32 nonce=3; //Ever increasing, prevents replay attacks
  optional bytes value=4;
  optional bytes signature=5; //The signature needs to also cover the application ID, otherwise you end up with cross-application replay attacks
};

////////////// QueueDHT ///////////////////
//message QueueDHTTransaction {
//  optional bytes key=1;
//  optional repeated bytes valuesToAppend=2;
//  optional uint32 numberOfElementsToTake=3;
//};

