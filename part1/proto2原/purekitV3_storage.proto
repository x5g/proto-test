/*
 * Copyright (c) 2015-2020, Virgil Security, Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     (1) Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *     (3) Neither the name of virgil nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package protos;
option go_package = ".;protos";
message UserRecordSigned {
    uint32 version = 1;
    string user_id = 2;
    bytes phe_record_ns = 3;
    bytes phe_record_nc = 4;
    bytes upk = 5;
    bytes encrypted_usk = 6;
    bytes encrypted_usk_backup = 7;
    bytes backup_pwd_hash = 8;
    bytes password_recovery_blob = 9;
}

message UserRecord {
    uint32 version = 1;
    bytes user_record_signed = 2;
    bytes signature = 3;
    bytes phe_record_t0 = 4;
    bytes phe_record_t1 = 5;
    uint32 record_version = 6;
    bytes password_recovery_wrap = 7;
}

message UserRecords {
    repeated UserRecord user_records = 1;
}

message CellKeySigned {
    uint32 version = 1;
    string userId = 2;
    string dataId = 3;
    bytes cpk = 4;
    bytes encrypted_csk_cms = 5;
    bytes encrypted_csk_body = 6;
}

message CellKey {
    uint32 version = 1;
    bytes cell_key_signed = 2;
    bytes signature = 3;
}

message RoleSigned {
    uint32 version = 1;
    string name = 2;
    bytes rpk = 3;
}

message Role {
    uint32 version = 1;
    bytes role_signed = 2;
    bytes signature = 3;
}

message Roles {
    repeated Role roles = 1;
}

message RoleAssignmentSigned {
    uint32 version = 1;
    string role_name = 2;
    string user_id = 3;
    bytes public_key_id = 4;
    bytes encrypted_rsk = 5;
}

message RoleAssignment {
    uint32 version = 1;
    bytes role_assignment_signed = 2;
    bytes signature = 3;
}

message RoleAssignments {
    repeated RoleAssignment role_assignments = 1;
}

message GrantKeySigned {
    uint32 version = 1;
    string user_id = 2;
    bytes key_id = 3;
    bytes encrypted_grant_key_blob = 4;
    uint64 creation_date = 5;
    uint64 expiration_date = 6;
}

message GrantKey {
    uint32 version = 1;
    bytes grant_key_signed = 2;
    bytes signature = 3;
    uint32 record_version = 4;
    bytes encrypted_grant_key_wrap = 5;
}

message UserIdRequest {
    string user_id = 1;
}

message UserIdAndDataIdRequest {
    string user_id = 1;
    string data_id = 2;
}