syntax = "proto3";
import "nanopb.proto";

// Этот тип перечисляет все возможные типы сообщений, которые будут далее определены.
// При передаче данных этот тип должен дополнять отправляемый пакет(в котором будет закодированное сообщение),
// чтобы принимающие стороны знали каким образом это сообщение декодировать
enum PB_MsgType {
	UNDEFINED = 0;
	CMD = 1; // команда
	RESPONSE = 2; // ответ на команду
	RESPONSE_GET_TEMP_PROFILE = 3; // ответ на команду GET_TEMP_PROFILE(большого размера, поэтому рассматривается особняком)
	PERIODIC_MESSAGE = 4; // периодические сообщения от контроллера, в т.ч. последний замер температуры и еще некоторые данные
	RESPONSE_TEMP_MEASURE = 5; // сервер отвечает что измерение было успешно принято
	FINISH_PROGRAM = 6; // котроллер оправляет серверу команду что он успешно завершил программу
	PLAIN_TEXT = 7; // простой текст
	SWITCH_OVEN_STATE = 8; // сообщение от контроллера с информацией о переключении состояния печки(включена/выключена)
	FULL_CONTROL_DATA = 9; // сообщение от контроллера с полной структурой данных о всех режимах управления
}

enum PB_CmdType {
	GET_ALL_INFO = 0; // сервер запрашивает у клиента всю необходимую информацию(термопрофиль, данные обо всех видах управлениях)
	GET_STATE = 1;
	HARD_RESET = 2; // сигнал(не команда) от микроконтроллера серверу и клиенту сбросить все свои данные, отдается или при перезапуске контроллера
	CLIENT_REQUIRES_RESET = 3; // запрос от веб-клиента микроконтроллеру на сброс всех данных(например по нажатию специальной кнопки в веб-интерфейсе), после этого контроллер должен дать серверу команду на сброс
	// команды для ручного режима управления
	// при ручном переключении нагревателя, если до этого была включена какая-то автоматическая программа стабилизации температуры, то она продолжит выполняться фоном(BACKGROUND_MODE т.е. время для неё продолжить тикать, но печка не будет переключаться)
	MANUAL_ON = 4; 
	MANUAL_OFF = 5;
	MANUAL_KEEP_CURRENT = 6;
	// команды для автоматических режимов управления
	STOP = 7;
	START = 8;
	START_BG = 9;
	SET_TIME = 10;
	PAUSE = 11;
	RESUME = 12;
	SET_CONST_TEMP = 13;
	ENABLE_STRICT_MODE = 14;
	DISABLE_STRICT_MODE = 15;
}

message PB_Command {
	PB_CmdType cmdType = 1;
	uint32 id = 2;
	uint32 priority = 3 [(nanopb).int_size = IS_8]; // [default = 1]; // чем больше эта величина, тем выше приоритет
	uint32 acmIdx = 4 [(nanopb).int_size = IS_8]; // дословно: Automatic Control Mode index - команда предназначена какому-то автоматическому режиму управления, этот индекс отражает какому именно
	uint32 value = 5; // некоторая величина, которая может отправляться вместе с типом команды(используется, например, для команды установки температуры)
}

message PB_Time {
	uint32 unixSeconds = 1; // секунды времени, с начала эпохи
	float mills = 2; // миллисекунд с начала последней секунды
}

message PB_TempMeasure {
	PB_Time time = 1;
	float temp = 2;
}

message PB_PeriodicMessage {
	PB_TempMeasure tempMeasure = 1;
	bool strictWaitEnabled = 2;
}

message PB_TempProfile {
	uint32 countPoints = 1 [(nanopb).int_size = IS_8]; // количество "точек" в термопрофиле
	repeated PB_TempMeasure data = 2 [(nanopb).max_count = 10, (nanopb).fixed_count = true];
}

message PB_ResponseGetTempProfile {
	bool success = 1; // [default = true];
	PB_TempProfile profile = 2;
}

enum PB_OvenState {
	OFF = 0;
	ON = 1;
}

enum PB_ControlMode {
	DEFAULT_OFF = 0;
	FOLLOW_TEMP_PROFILE = 1;
	HOLD_CONST_TEMP = 2;
	MANUAL = 3;
}

enum PB_ControlState {
	DISABLED = 0;
	BACKGROUND = 1;
	ENABLED = 2;
}

enum PB_ErrorType {
	NONE = 0;
	FAULTY_TEMPERATURE_SENSOR = 1;
	FAULTY_RELAY = 2;
	UNKNOWN_COMMAND = 3;
	UNKNOWN_ERROR = 4;
}

message PB_Response {
	PB_CmdType cmdType = 1;
	uint32 cmdId = 2;
	bool success = 3;
	PB_OvenState ovenState = 4;
	PB_ErrorType error = 5; // [default = NONE];
	PB_Time time = 6;
}

message PB_SwitchOvenState {
	PB_Time time = 1;
	PB_OvenState ovenState = 2;
}

message PB_ControlData {
	PB_ControlMode controlMode = 1;
	PB_ControlState controlState = 2;
	bool isPaused = 3;
	PB_Time startTime = 4;
	PB_Time elapsedTime = 5;
	PB_Time duration = 6;
}

message PB_FullControlData {
	PB_ControlMode leadControlMode = 1; // ведущий режим управления(по умолчанию DEFAULT_OFF, а дальше смотря куда кликнет пользователь)
	PB_OvenState ovenState = 2; // состояние печки, дублирует одноименную переменную в структуре PB_Response
	float constTempValue = 3; // (только для режима HOLD_CONST_TEMP - величина температуры для удержания)
	bool strictMode = 4; // строгий режим для режима FOLLOW_TEMP_PROFILE, это означает что программа нагревания не будет переходить к следующему этапу, не завершив конечную точку нагрева на предыдущем этапе
	bool strictWaitEnabled = 5; // (дословно - в строгом режиме ожидание включено) флаг для строгого режима, означает что программа управления принудительно поставлена на паузу, до тех пор пока печка не нагреется до нужной температуры
	repeated PB_ControlData data = 6 [(nanopb).max_count = 2, (nanopb).fixed_count = true];
}
