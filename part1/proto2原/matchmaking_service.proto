syntax = "proto3";
package matchmaking.v1;

option go_package = "v1";

message UserInfo {
    string username = 1;
}

message ConnectionInfo {
    string public_ip = 1;
    string port = 2;
    UserInfo user_info = 3;
}

message FindMatchRequest {
    string api = 1;
    string user_token = 2;
    UserInfo user_info = 3;
}

message FindMatchResponse {
    enum ErrorCode {
        INTERNAL_ERROR = 0;
        SERVER_TIMEOUT = 1;
    }
    string api = 1;
    string session_token = 2;
    ErrorCode error_code = 3;
}

message FindMatchStatusRequest {
    string api = 1;
    string session_token = 2;
    bool   cancel = 3;
}

message FindMatchStatusResponse {
    enum Status {
        SEARCHING = 0;
        ERROR     = 1;
        FOUND     = 2;
    }
    enum ErrorCode {
        INTERNAL_ERROR = 0;
        SERVER_TIMEOUT = 1;
    }
    string    api = 1;
    string    lobby_key = 2;
    Status    status = 3;
    ErrorCode error_code = 4;
}

message JoinLobbyRequest {
    string api = 1;
    string lobby_key = 2;
    ConnectionInfo connection_info = 3;
}

message JoinLobbyResponse {
    string api = 1;
    
}

message JoinLobbyStatusRequest {
	string api = 1;
}
message JoinLobbyStatusResponse {
	enum ErrorCode {
		INTERNAL_ERROR = 0;
	}

	string api = 1;
	ErrorCode error_code = 2;
}

message RejoinLobbyRequest {
	string api = 1;
}
message RejoinLobbyResponse {
	enum ErrorCode {
		INTERNAL_ERROR = 0;
	}

	string api = 1;
	ErrorCode error_code = 2;
}

message RejoinLobbyStatusRequest {
	string api = 1;
}
message RejoinLobbyStatusResponse {
	enum ErrorCode {
		INTERNAL_ERROR = 0;
	}

	string api = 1;
	ErrorCode error_code = 2;
}

message HostLobbyRequest {
    string api = 1;
    string session_token = 2;
}

message HostLobbyResponse {
    enum ErrorCode {
        INTERNAL_ERROR = 0;
    }

    string api = 1;
    string lobby_code = 2;
    ErrorCode error_code = 3;
}

message GetNewClientsRequest {
    string api = 1;
    string session_token = 2;
}

message GetNewClientsResponse {
    enum ErrorCode {
        INTERNAL_ERROR = 0;
    }

    string api = 1;
    repeated ConnectionInfo connection_info = 2;
    ErrorCode error_code = 3;
}

service Matchmaking {
    rpc FindMatch(FindMatchRequest) returns (FindMatchResponse) {}
    rpc FindMatchStatus(stream FindMatchStatusRequest) returns (stream FindMatchResponse) {}

    rpc JoinLobby(JoinLobbyRequest) returns (JoinLobbyResponse) {}
    rpc JoinLobbyStatus(stream JoinLobbyStatusRequest) returns (stream JoinLobbyStatusResponse) {}

    rpc RejoinLobby(RejoinLobbyRequest) returns (RejoinLobbyResponse) {}
    rpc RejoinLobbyStatus(stream RejoinLobbyStatusRequest) returns (stream RejoinLobbyStatusResponse) {}


}