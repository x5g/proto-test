

import "lib/protocol/attribute.proto";
import "lib/protocol/entity.proto";
import "lib/rpc/rpc.proto";
import "service/presence/presence_types.proto";
package bnet.protocol.presence;

option cc_generic_services = true;

message SubscribeRequest {
  optional .bnet.protocol.EntityId agent_id = 1;
  required .bnet.protocol.EntityId entity_id = 2;
  required uint64 object_id = 3;
}

message UnsubscribeRequest {
  optional .bnet.protocol.EntityId agent_id = 1;
  required .bnet.protocol.EntityId entity_id = 2;
}

message UpdateRequest {
  required .bnet.protocol.EntityId entity_id = 1;
  repeated .bnet.protocol.presence.FieldOperation field_operation = 2;
}

message QueryRequest {
  required .bnet.protocol.EntityId entity_id = 1;
  repeated .bnet.protocol.presence.FieldKey key = 2;
}

message QueryResponse {
  repeated .bnet.protocol.presence.Field field = 2;
}

service PresenceService {
  rpc Subscribe(.bnet.protocol.presence.SubscribeRequest) returns (.bnet.protocol.NoData);
  rpc Unsubscribe(.bnet.protocol.presence.UnsubscribeRequest) returns (.bnet.protocol.NoData);
  rpc Update(.bnet.protocol.presence.UpdateRequest) returns (.bnet.protocol.NoData);
  rpc Query(.bnet.protocol.presence.QueryRequest) returns (.bnet.protocol.presence.QueryResponse);
}

