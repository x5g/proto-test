package cstore;

//////////////////////////////////////////////////////////////
//CA
//////////////////////////////////////////////////////////////

message pb_MSG_SYS_CA_LOG_IN
{
   required uint64 uid =1;
   required string pwd =2;
}

message pb_MSG_SYS_CA_LOG_IN_ACK
{
    required string token = 1;
}


//////////////////////////////////////////////////////////////

message pb_MSG_SYS_SU_CHK_BLOCK
{
    required string block_index = 1;
}

message pb_MSG_SYS_SU_PUT_BLOCK
{
    required string block_index = 1;
}

message pb_MSG_SYS_SU_GET_BLOCK
{
    required string block_index = 1;
}

message pb_MSG_SYS_SU_DEL_BLOCK
{
    required string block_index = 1;
}

message pb_MSG_SYS_SU_DEL_BLOCK2
{
    required string block_index = 1;
}

message pb_MSG_SU_SU_GET_BLOCK_LIST
{
    required int32 bucket_index = 1;
    required uint64 start_seq = 2;
    required uint64 end_seq = 3;
}

message pb_MSG_SU_SU_GET_BLOCK_LIST_ACK
{
    required int32 bucket_index = 1;
    required uint64 start_seq = 2;
    required uint64 end_seq = 3;
    message Block_Item
    {
        required string block_index = 1;
        required uint64 block_seq = 2;
	required uint32 block_len = 3;
        required uint64 time_stamp = 4;
        required int32 delete_flag = 5;
    }
    repeated Block_Item block_list = 4;
}

message pb_MSG_SU_SU_PUT_BLOCK
{
    required string block_index = 1;
    required uint64  block_seq = 2;
}

message pb_MSG_SU_SU_GET_BLOCK
{
    required string block_index = 1;
}

message pb_MSG_SU_SU_DEL_BLOCK
{
    required string block_index = 1;
    required uint64  block_seq = 2;
}

message pb_MSG_SU_SU_DEL_BLOCK2
{
    required string block_index = 1;
    required uint64  block_seq = 2;
}

message pb_MSG_SU_SU_GET_CURRENT_SEQ
{
    required int32 bucket_index = 1;
}

message pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK
{
    required int32 bucket_index = 1;
    required uint64 current_seq = 2;
}

message pb_MSG_SU_SU_HEARTBEAT_BUILD
{
    required int32 bucket_index = 1;
}

message pb_MSG_CS_SU_EXTENT_BUCKET
{
    required int32 new_mod_nr = 1;
}

message pb_MSG_CS_SU_MIGRATE_BUCKET
{
    required int32  bucket_index = 1;
    required uint32 ip = 2;
}

message pb_MSG_CS_SU_DELETE_BUCKET
{
    required int32 bucket_index = 1;
}

enum Bucket_state
{
    STOP = 1;
    WORK = 2;
    RECOVERY = 3;
}

message pb_MSG_CS_SU_SET_BUCKET_STATE
{
    required int32 bucket_index = 1;
    required Bucket_state state = 2;
}

/////////////////////////////////////////////////////////////////
//MU
/////////////////////////////////////////////////////////////////
message pb_MSG_SYS_MU_GET_USER_INFO
{
    required uint64 uid = 1;
    required string token = 2;
}

message pb_MSG_SYS_MU_GET_USER_INFO_ACK
{
    required uint64 quota_total = 1;
    required uint64 quota_used = 2;
    required uint64 seq_nr = 3;
}

message pb_MSG_SYS_MU_PUT_DIR
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
}

message pb_MSG_SYS_MU_DEL_DIR
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
}

message pb_MSG_SYS_MU_GET_DIR
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
}

message pb_MSG_SYS_MU_GET_DIR_ACK
{
    message DEntry
    {
        required bytes name = 1;
        required uint32 type = 2;
    }

    repeated DEntry dentry_list = 1; 
}

message pb_MSG_SYS_MU_STAT_DIR
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
}

message pb_MSG_SYS_MU_STAT_DIR_ACK
{
    required uint32 mode = 1;
    required uint64 ctime = 2;
    required uint64 mtime = 3;
    required uint64 size = 4;
}

message Block_Meta
{
    required string checksum = 1;
}

message pb_MSG_SYS_MU_GET_DIR2
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
}

message pb_MSG_SYS_MU_GET_DIR2_ACK
{
    message DEntry 
    {
        required uint32 type = 1;
        required bytes name = 2;
        required uint32 mode = 3;
        required uint64 ctime = 4;
        required uint64 mtime = 5;
        required uint64 size = 6;
        optional uint64 version = 7;
        repeated Block_Meta block_list = 8;
    }

    repeated DEntry dentry_list = 1;
}

message pb_MSG_SYS_MU_MOV_DIR
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes src_path = 3;
    required bytes dest_path = 4;
}

message File_Attr
{
    required uint64 version = 1;
    required uint32 mode = 2;
    required uint64 ctime = 3;
    required uint64 mtime = 4;
    required uint32 type = 5;
    required uint64 size = 6;
}

message pb_MSG_SYS_MU_PUT_FILE
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
    required File_Attr attr = 4;
    repeated Block_Meta block_list = 5;
}

message pb_MSG_SYS_MU_PUT_FILE_ACK
{
    required uint64 version = 1;
}

message pb_MSG_SYS_MU_DEL_FILE
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
}

message pb_MSG_SYS_MU_GET_FILE
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes path = 3;
}

message pb_MSG_SYS_MU_GET_FILE_ACK
{
    required File_Attr attr = 1;
    repeated Block_Meta block_list = 2;
}

message pb_MSG_SYS_MU_MOV_FILE
{
    required uint64 uid = 1;
    required string token = 2;
    required bytes src_path = 3;
    required bytes dest_path = 4;
}

message pb_MSG_SYS_MU_GET_USER_LOG
{
    required uint64 uid = 1;
    required string token = 2;
    required uint64 seq_nr = 3;
}

message File_Meta
{
   required File_Attr attr = 1;
   repeated Block_Meta block_list = 2;
}

message Log_Entry
{
    required uint64 seq_nr = 1;
    required uint64 uid = 2;
    required string token = 3;
    required uint32 op_code = 4;
    optional bytes path = 5;
    optional bytes src_path = 6;
    optional bytes dest_path = 7;
    optional File_Meta file_meta = 8;
}


message pb_MSG_SYS_MU_GET_USER_LOG_ACK
{

    repeated Log_Entry log_list = 1;
}

message pb_MSG_MPC_MU_CREATE_USER
{
    required uint64 uid = 1;
    required uint64 quota = 2;
}

message pb_MSG_MPC_MU_DELETE_USER
{
    required uint64 uid = 1;
}

message pb_MSG_CS_MU_SET_BUCKET_STATE
{
    required uint32 bucket_index = 1;
    required uint32 state = 2;
}

message pb_MSG_CS_MU_DELETE_BUCKET
{
    required uint32 bucket_index = 1;
}

message pb_MSG_CS_MU_MIGRATE_BUCKET
{
    required uint32 source_mu = 1;
    required uint32 bucket_index = 2;
}

message pb_MSG_CS_MU_EXTENT_BUCKET
{
    required uint32 new_mod = 1;
}

message pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE
{
    required uint32 bucket_index = 1;
}

message pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK
{
    required uint64 seq_nr = 1;
}

message pb_MSG_MU_MU_SYNC_HANDSHAKE
{
    required uint64 bucket_index = 1;
    required uint64 seq_nr = 2;
}

message pb_MSG_MU_MU_PUSH_LOG
{
    repeated Log_Entry log_list = 1;
}

message pb_MSG_MU_MU_PULL_LOG_ACK
{
    repeated Log_Entry log_list = 1;
}


//////////////////////////////////////////////////////
//CA
/////////////////////////////////////////////////////


//////////////////////////////////////////////////////
//RS
//////////////////////////////////////////////////////
message Map_Item
{
    repeated uint32 Module_IP = 1;
}

message Hash_Version
{
    repeated Map_Item map_list = 1;
    required uint32 hash_version = 2;
}

message Sys_Order
{
   required uint32 order_header = 1;
   required bytes order_content = 2;
   required uint32 hash_version = 3;
}

message pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH 
{
    required uint32 local_version = 1;
}

message pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK 
{
     required Hash_Version hash_version = 1;    
}


message pb_MSG_SYS_RS_UPDATE_MU_HASH 
{
    required uint32 local_version = 1;
}

message pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK 
{
    repeated  Sys_Order sys_order = 1;  
}


message pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH 
{
    required uint32 local_version = 1;
}

message pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK 
{
    required Hash_Version hash_version = 1; 
}


message pb_MSG_SYS_RS_UPDATE_SU_HASH 
{
    required uint32 local_version = 1;
}

message pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK 
{
    repeated  Sys_Order sys_order = 1; 
}

message pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM
{
    required uint32 bucket_num = 1;
}

message pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK 
{
    required Map_Item ip_list = 1;
}

message pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM
{
    required uint32 bucket_num = 1;
}

message pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK 
{
    required Map_Item ip_list = 1;
}



///////////////////////////////////////////////////////
//CS
///////////////////////////////////////////////////////
message Map_Bucket
{
    required uint32 bucket_num =1;
    required uint32 ip_list0 = 2;
    required uint32 ip_list1 = 3;
    required uint32 ip_list2 = 4;
}


message Bucket_Item
{
	required uint32 bucket =1;
	required uint32 bucket_load =2;
}

message Module_Ip
{
	required uint32 ip =1;
	required uint32 content = 2;
}

message Bucket_List
{
    repeated Bucket_Item bucket_item = 1;
    required string mu_ip = 2;
}

message pb_MSG_RS_CS_UPDATE_ALL_MU_HASH 
{
    required uint32 local_version = 1;
}

message pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK 
{
    repeated Map_Bucket map_bucket = 1;
    repeated Sys_Order sys_order = 2;   
}


message pb_MSG_RS_CS_UPDATE_MU_HASH 
{
    required uint32 version = 1;
}

message pb_MSG_RS_CS_UPDATE_MU_HASH_ACK 
{
    repeated  Sys_Order sys_order = 1; 	
}

message pb_MSG_RS_CS_UPDATE_ALL_SU_HASH 
{
    required uint32 local_version = 1;
}

message pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK 
{
    repeated Map_Bucket map_bucket = 1;
    repeated Sys_Order sys_order = 2;
}


message pb_MSG_RS_CS_UPDATE_SU_HASH 
{
    required uint32 version = 1;
}

message pb_MSG_RS_CS_UPDATE_SU_HASH_ACK 
{
    repeated  Sys_Order sys_order = 1; 	
}

message pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE 
{
    required uint32 storage_load_limit = 1;
}

message pb_MSG_MU_CS_HEARTBEAT 
{
    repeated Bucket_Item bucket_item= 1;
}

message pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE 
{
    required uint32 storage_load_limit = 1;
}

message pb_MSG_SU_CS_HEARTBEAT 
{
    repeated Bucket_Item bucket_item= 1;
}


message pb_MSG_MPC_CS_RUBBISH_RECYCLE 
{
    required uint32 scale = 1;
}

message pb_MSG_MPC_CS_SU_MIGRATE_BUCKET
{
    required uint32 source_ip = 1;
    required uint32 destination_ip =2;
    required int32 bucket_num = 3;
}

message pb_MSG_MPC_CS_MU_MIGRATE_BUCKET
{
    required uint32 source_ip = 1;
    required uint32 destination_ip =2;
    required int32 bucket_num = 3;
}

message pb_MSG_MPC_CS_MU_EXTENT_BUCKET 
{
    required uint32 new_mod = 1;
}

message pb_MSG_MPC_CS_SU_EXTENT_BUCKET 
{
    required uint32 new_mod = 1;
}

message pb_MSG_MPC_CS_GET_SU_RULE_ACK 
{
    repeated Map_Bucket map_bucket = 1;
}

message pb_MSG_MPC_CS_GET_MU_RULE_ACK 
{
    repeated Map_Bucket map_bucket = 1;
}

message pb_MSG_MPC_CS_SU_INIT_HASH
{
    repeated  Module_Ip module_ip =1;
    required  uint32 mod = 2;
}

message pb_MSG_MPC_CS_MU_INIT_HASH
{
    repeated  Module_Ip module_ip =1;
    required uint32 mod = 2;
}

message pb_MSG_MPC_CS_MU_BUCKET_ACK
{
    repeated Bucket_List bucket_list =1;
}

message pb_MSG_MPC_CS_SU_BUCKET_ACK
{
    repeated Bucket_List bucket_list =1;
}

///////////////////////////////////////////////////////
//WD
///////////////////////////////////////////////////////
enum Module_Name
{
    NO_module = 0;
    RS_module = 1;  
    CA_module = 2;  
    CS_module = 3;
    MU_module = 4;
    SU_module = 5;
}

message pb_MSG_DS_WD_START_MODULE
{
    required Module_Name module = 1;
    optional string args = 2;
}

message pb_MSG_DS_WD_UPDATE_TIME
{
    required uint64 sec = 1;
}

///////////////////////////////////////////////////////
//DS
///////////////////////////////////////////////////////
message pb_MSG_WD_DS_HEART_BEAT
{
    required Module_Name module = 1;
    required uint32 mem = 2;
    required uint32 disk = 3;
    required uint32 net = 4;
}

message pb_MSG_MPC_DS_MODULES_INFO_ACK
{
    message Module_Item
    {
        required uint32 Module_IP = 1;
        required Module_Name module = 2;
        required uint32 mem = 3;
        required uint32 disk = 4;
        required uint32 net = 5;
    }
    repeated Module_Item module_list = 1;
}

message pb_MSG_MPC_DS_START_MODULE
{
    required uint32 Module_IP = 1;
    required Module_Name module_name = 2;
    repeated string args = 3;
}

message pb_MSG_MPC_DS_STOP_MODULE
{
    required uint32 Module_IP = 1;
}

