// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

syntax = "proto2";

package yb.cdc;

option java_package = "org.yb.cdc";

import "yb/common/common.proto";
import "yb/common/wire_protocol.proto";
import "yb/master/master.proto";
import "yb/tserver/tserver.proto";
import "yb/util/opid.proto";

service CDCService {
  rpc CreateCDCStream (CreateCDCStreamRequestPB) returns (CreateCDCStreamResponsePB);
  rpc DeleteCDCStream (DeleteCDCStreamRequestPB) returns (DeleteCDCStreamResponsePB);
  rpc ListTablets (ListTabletsRequestPB) returns (ListTabletsResponsePB);
  rpc GetChanges (GetChangesRequestPB) returns (GetChangesResponsePB);
  rpc GetCheckpoint (GetCheckpointRequestPB) returns (GetCheckpointResponsePB);
  rpc UpdateCdcReplicatedIndex (UpdateCdcReplicatedIndexRequestPB)
      returns (UpdateCdcReplicatedIndexResponsePB);
  rpc BootstrapProducer (BootstrapProducerRequestPB) returns (BootstrapProducerResponsePB);
  rpc GetLatestEntryOpId (GetLatestEntryOpIdRequestPB) returns (GetLatestEntryOpIdResponsePB);
}

message CDCErrorPB {
  enum Code {
    // An error which has no more specific error code.
    // The code and message in 'status' may reveal more details.
    //
    // RPCs should avoid returning this, since callers will not be
    // able to easily parse the error.
    UNKNOWN_ERROR = 1;
    TABLET_NOT_FOUND = 2;
    TABLE_NOT_FOUND = 3;
    SUBSCRIBER_NOT_FOUND = 4;
    CHECKPOINT_TOO_OLD = 5;
    TABLET_NOT_RUNNING = 6;
    NOT_LEADER = 7; // deprecated. use TABLET_NOT_FOUND
    LEADER_NOT_READY = 11;
    NOT_RUNNING = 8;
    INTERNAL_ERROR = 9;
    INVALID_REQUEST = 10;
  }

  // The error code.
  optional Code code = 1 [default = UNKNOWN_ERROR];

  // The Status object for the error. This will include a textual
  // message that may be more useful to present in log messages, etc,
  // though its error code is less specific.
  optional AppStatusPB status = 2;
}

enum CDCRecordType {
  CHANGE = 1;
  AFTER = 2;
  ALL = 3;
}

enum CDCRecordFormat {
  JSON = 1;
  WAL = 2; // Used for 2DC.
}

message CreateCDCStreamRequestPB {
  // Table to set up CDC on.
  optional string table_id = 1;
  optional CDCRecordType record_type = 2 [default = CHANGE];
  optional CDCRecordFormat record_format = 3 [default = JSON];
}

message CreateCDCStreamResponsePB {
  optional CDCErrorPB error = 1;
  optional bytes stream_id = 2;
}

message DeleteCDCStreamRequestPB {
  repeated bytes stream_id = 1;
}

message DeleteCDCStreamResponsePB {
  optional CDCErrorPB error = 1;
}

message ListTabletsRequestPB {
  optional string stream_id = 1;
  // local_only = true will only list tablets local to the tserver that receives the request.
  // local_only = false will list  all tablets for the stream.
  optional bool local_only = 2 [default = false];
}

message ListTabletsResponsePB {
  optional CDCErrorPB error = 1;
  repeated CDCTabletPB tablets = 2;
}

message CDCTabletPB {
  message ReplicaPB {
    repeated HostPortPB broadcast_addresses = 1;
    // Don't use private_rpc_addresses since we're cross-universe
  }
  optional bytes tablet_id = 1;
  // Tservers holding data for the tablet.
  repeated ReplicaPB tservers = 2;
}

message CDCCheckpointPB {
  optional OpIdPB op_id = 1;
}

message GetChangesRequestPB {
  optional bytes stream_id = 1;
  // Tablet to get the changes for.
  optional bytes tablet_id = 2;

  // Checkpoint to start reading from (exclusive).
  // Start reading from the first record after this checkpoint.
  optional CDCCheckpointPB from_checkpoint = 3;

  // Maximum records to read.
  optional uint32 max_records = 4;

  // Whether the caller knows the tablet address or needs to use us as a proxy.
  optional bool serve_as_proxy = 5 [default = true];
}

message KeyValuePairPB {
  optional bytes key = 1;
  optional QLValuePB value = 2;
}

message CDCRecordPB {
  enum OperationType {
    WRITE = 1;
    DELETE = 2;
  }
  optional uint64 time = 1;
  optional OperationType operation = 2;

  // Primary key of the record that changed
  repeated KeyValuePairPB key = 3;

  // Key-value pairs (column_name : value) of changes / before record / after record
  repeated KeyValuePairPB changes = 4;
  repeated KeyValuePairPB before = 5;  // NOT CURRENTLY USED
  repeated KeyValuePairPB after = 6;   // NOT CURRENTLY USED

  optional tserver.TransactionStatePB transaction_state = 7;
}

message GetChangesResponsePB {
  optional CDCErrorPB error = 1;
  optional CDCRecordType record_type = 2 [default = CHANGE];
  optional CDCRecordFormat record_format = 3;
  repeated CDCRecordPB records = 4;
  // Checkpoint that consumers can send back in GetChanges RPC
  // to mark CDC records until this checkpoint as committed.
  optional CDCCheckpointPB checkpoint = 5;

  // In case the tablet is no longer hosted on this tserver, provide the list of tservers holding
  // data for the tablet.
  repeated HostPortPB tserver = 6;
}

message GetCheckpointRequestPB {
  optional bytes stream_id = 1;
  optional bytes tablet_id = 2;
}

message GetCheckpointResponsePB {
  optional CDCErrorPB error = 1;
  optional CDCCheckpointPB checkpoint = 2;
}

message UpdateCdcReplicatedIndexRequestPB {
  // Tablet being updated.
  optional bytes tablet_id = 1;

  // Minimum replicated index across all the streams for this tablet.
  optional int64 replicated_index = 2;
}

message UpdateCdcReplicatedIndexResponsePB {
  optional CDCErrorPB error = 1;
}

message BootstrapProducerRequestPB {
  repeated string table_ids = 1;
}

message BootstrapProducerResponsePB {
  optional CDCErrorPB error = 1;
  repeated bytes cdc_bootstrap_ids = 2;
}

message GetLatestEntryOpIdRequestPB {
  optional bytes tablet_id = 1;
}

message GetLatestEntryOpIdResponsePB {
  optional CDCErrorPB error = 1;
  optional OpIdPB op_id = 2;
}
