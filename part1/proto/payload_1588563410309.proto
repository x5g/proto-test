syntax = "proto3";
package internal;

import "google/protobuf/timestamp.proto";

message PayloadNetworkUpdate {
	string nodeID = 3;
	// operation is the event that occured to remote node.
	int32 operation = 1;
	// remoteNode is the node on which actions where taken.	
	PayloadNode remoteNode = 2;
}

message PayloadCtrl {
	// operation is the operation that has to be performed.
	// See Ctrl operations in protocol.go
	int32 operation = 1;
}

message PayloadBandwidth {
	// node identifier.
	string nodeID = 4;
	// tot is the total number of bytes transmitted.
	int64 tot = 1;
	// bandwidth is the current bandwidth.
	int64 bandwidth = 2;
	// type is the transmission direction, i.e. dowload/upload
	string type = 3;
}

message PayloadMonitor {
	// feature contains the feature that should be monitored.
	int32 feature = 1;
}

message PayloadHello {
	// bport is the booster listening port.
	string bport = 1;
	// pport is the proxy listening port.
	string pport = 2;
}

message PayloadConnect {
	// target of the connect procedure.
	string target = 1;
}

message PayloadDisconnect {
	// id is the identifier of the node that should be disconnected
	string id = 1;
}

message PayloadNode {
	// id is the identifier of the node. Usually a sha1 hash.
	string id = 1;
	// baddr is the booster listening address.
	string baddr = 2;
	// paddr is the proxy listening address.
	string paddr = 3;
	// active tells the connection state of the node.
	bool active = 4;
	// tunnels are the proxy tunnels managed by this node.
	repeated Tunnel tunnels = 5;

	message Tunnel {
		// id is the tunnel identifier. Usally a sha1 hash.
		string id = 1;
		// target is the remote endpoint address of the tunnel.
		string target = 2;
		// copies are the replications of this tunnel.
		int32 copies = 4;
	}
}

message PayloadHeartbeat {
	// id is the identifier of the heartbeat message. Should be unique.
	string id = 1;
	// hops is the number of times that the heartbeat message has been reused.
	int32 hops = 2;
	// ttl is the time to leave.
	google.protobuf.Timestamp ttl = 3;
}

message PayloadProxyUpdate {
	string nodeID = 3;
	// target is the remote endpoint address of the tunnel.
	string target = 1;
	// operation is the action performed on the tunnel.
	int32 operation = 2;
}
