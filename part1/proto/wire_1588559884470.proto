syntax = "proto3";

package jp.co.cyberagent.stf.proto;

option java_outer_classname = "Wire";

enum MessageType {
    MESSAGETYPE_NONE = 0;
    DO_IDENTIFY = 1;
    DO_KEYEVENT = 2;
    DO_TYPE = 3;
    DO_WAKE = 4;
    DO_ADD_ACCOUNT_MENU = 24;
    DO_REMOVE_ACCOUNT = 20;
    GET_ACCOUNTS = 26;
    GET_BROWSERS = 5;
    GET_CLIPBOARD = 6;
    GET_DISPLAY = 19;
    GET_PROPERTIES = 7;
    GET_RINGER_MODE = 27;
    GET_SD_STATUS = 25;
    GET_VERSION = 8;
    GET_WIFI_STATUS = 23;
    SET_CLIPBOARD = 9;
    SET_KEYGUARD_STATE = 10;
    SET_RINGER_MODE = 21;
    SET_ROTATION = 12;
    SET_WAKE_LOCK = 11;
    SET_WIFI_ENABLED = 22;
    SET_MASTER_MUTE = 28;
    EVENT_AIRPLANE_MODE = 13;
    EVENT_BATTERY = 14;
    EVENT_CONNECTIVITY = 15;
    EVENT_PHONE_STATE = 16;
    EVENT_ROTATION = 17;
    EVENT_BROWSER_PACKAGE = 18;
}

message Envelope {
    uint32 id = 1;
    MessageType type = 2;
    bytes message = 3;
}

// Events

message AirplaneModeEvent {
    bool enabled = 1;
}

message BatteryEvent {
    string status = 1;
    string health = 2;
    string source = 3;
    uint32 level = 4;
    uint32 scale = 5;
    double temp = 6;
    double voltage = 7;
}

message BrowserApp {
    string name = 1;
    string component = 2;
    bool selected = 3;
    bool system = 4;
}

message BrowserPackageEvent {
    bool selected = 1;
    repeated BrowserApp apps = 2;
}

message ConnectivityEvent {
    bool connected = 1;
    string type = 2;
    string subtype = 3;
    bool failover = 4;
    bool roaming = 5;
}

message PhoneStateEvent {
    string state = 1;
    bool manual = 2;
    string operator = 3;
}

message RotationEvent {
    int32 rotation = 1;
}

// Service

message GetVersionRequest {
}

message GetVersionResponse {
    bool success = 1;
    string version = 2;
}

message SetKeyguardStateRequest {
    bool enabled = 1;
}

message SetKeyguardStateResponse {
    bool success = 1;
}

message SetWakeLockRequest {
    bool enabled = 1;
}

message SetWakeLockResponse {
    bool success = 1;
}

enum ClipboardType {
    CLIPBOARDTYPE_NONE = 0;
    TEXT = 1;
}

message SetClipboardRequest {
    ClipboardType type = 1;
    string text = 2;
}

message SetClipboardResponse {
    bool success = 1;
}

message GetClipboardRequest {
    ClipboardType type = 1;
}

message GetClipboardResponse {
    bool success = 1;
    ClipboardType type = 2;
    string text = 3;
}

message GetBrowsersRequest {
}

message GetBrowsersResponse {
    bool success = 1;
    bool selected = 2;
    repeated BrowserApp apps = 3;
}

message GetDisplayRequest {
    int32 id = 1;
}

message GetDisplayResponse {
    bool success = 1;
    int32 width = 2;
    int32 height = 3;
    float xdpi = 4;
    float ydpi = 5;
    float fps = 6;
    float density = 7;
    int32 rotation = 8;
    bool secure = 9;
}

message Property {
    string name = 1;
    string value = 2;
}

message GetPropertiesRequest {
    repeated string properties = 1;
}

message GetPropertiesResponse {
    bool success = 1;
    repeated Property properties = 2;
}

message DoIdentifyRequest {
    string serial = 1;
}

message DoIdentifyResponse {
    bool success = 1;
}

message GetAccountsRequest {
    string type = 1;
}

message GetAccountsResponse {
    bool success = 1;
    repeated string accounts = 2;
}

message DoAddAccountMenuRequest {
}

message DoAddAccountMenuResponse {
    bool success = 1;
}

message DoRemoveAccountRequest {
    string type = 1;
    string account = 2;
}

message DoRemoveAccountResponse {
    bool success = 1;
}

enum RingerMode {
    SILENT = 0;
    VIBRATE = 1;
    NORMAL = 2;
}

message SetRingerModeRequest {
    RingerMode mode = 1;
}

message SetRingerModeResponse {
    bool success = 1;
}

message GetRingerModeRequest {
}

message GetRingerModeResponse {
    bool success = 1;
    RingerMode mode = 2;
}

message SetWifiEnabledRequest {
    bool enabled = 1;
}

message SetWifiEnabledResponse {
    bool success = 1;
}

message GetWifiStatusRequest {
}

message GetWifiStatusResponse {
    bool success = 1;
    bool status = 2;
}

message GetSdStatusRequest {
}

message GetSdStatusResponse {
    bool success = 1;
    bool mounted = 2;
}

message SetMasterMuteRequest {
    bool enabled = 1;
}

message SetMasterMuteResponse {
    bool success = 1;
}

// Agent

enum KeyEvent {
    DOWN = 0;
    UP = 1;
    PRESS = 2;
}

message KeyEventRequest {
    KeyEvent event = 1;
    int32 keyCode = 2;
    bool shiftKey = 3;
    bool ctrlKey = 4;
    bool altKey = 5;
    bool metaKey = 6;
    bool symKey = 7;
    bool functionKey = 8;
    bool capsLockKey = 9;
    bool scrollLockKey = 10;
    bool numLockKey = 11;
}

message DoTypeRequest {
    string text = 1;
}

message SetRotationRequest {
    int32 rotation = 1;
    bool lock = 2;
}

message DoWakeRequest {
}
