syntax = "proto3";

package Blocksettle.Communication.ProxyPb;

// Messages sent from PB to proxy and back.
// `Request` is sent from PB (proxy is a server here).

message Request
{
    message Terminal
    {
        string email = 1;

        // Serialized ProxyTerminalPb.Response
        bytes data = 2;
    }

    // Message would be sent after receiving ClientConnected
    message UserInfo
    {
        // Copied as-is from ClientConnected message
        bytes client_id = 1;

        string email = 2;

        // bs::network::UserType as int
        int32 user_type = 3;

        bool enabled = 4;
    }

    message UserStatusUpdated
    {
        string email = 1;

        bool enabled = 3;
    }

    // PB should send when proxy is connected first time or when CC gen is updated (new product is added)
    message GenAddrUpdated
    {
        bytes auth_addresses_signed = 1;
        bytes cc_addresses_signed = 2;
    }

    message TermRep
    {
        string email = 1;
        bool success = 2;
        string error_msg = 3;
        int64 internal_request_id = 4;
    }

    message TermRepSubmitAuthAddr
    {
        TermRep term_rep = 1;
        int32 validation_amount_cents = 2;
        bool confirmation_required = 3;
    }

    message UpdateFeeRate
    {
        float fee_rate = 1;
    }

    oneof data
    {
        // Messages
        Terminal terminal = 30;
        UserInfo user_info = 31;
        TermRepSubmitAuthAddr submit_auth_address = 32;
        TermRep confirm_auth_address = 33;
        TermRep submit_cc_address = 34;
        TermRep confirm_cc_address = 35;
        UserStatusUpdated user_status_updated = 36;
        GenAddrUpdated gen_addr_updated = 37;
        UpdateFeeRate update_fee_rate = 38;
    }
}

// Messages sent from proxy to PB
message Response
{
    message OnlineUsers
    {
        int32 chat = 1;
        int32 market = 2;
        int32 trading = 3;
        int32 dealing = 4;
    }

    message Terminal
    {
        string email = 1;

        // Serialized ProxyTerminalPb.Request
        bytes data = 2;
    }

    message ClientConnected
    {
        string email = 1;

        // If set then PB should send user info back
        bytes client_id = 2;
    }

    message ClientDisconnected
    {
        string email = 1;
    }

    message TermReq
    {
        // address must be valid
        string address = 1;
        string email = 2;
        int64 internal_request_id = 3;
    }

    message TermReqCc
    {
        TermReq term_req = 1;
        uint32 seed = 2;
        string cc_product = 3;
    }

    oneof data
    {
        // Messages
        Terminal terminal = 30;
        OnlineUsers online_users = 31;
        ClientConnected client_connected = 32;
        ClientDisconnected client_disconnected = 33;
        TermReq submit_auth_address = 34;
        TermReq confirm_auth_address = 35;
        TermReqCc submit_cc_address = 36;
        TermReqCc confirm_cc_address = 37;
    }
}
