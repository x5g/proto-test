// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package pb;

// option go_package="github.com/tcncloud/protoc-gen-persist/examples/user_spanner/pb;pb";
// if we wanted to generate persist implementation in a different package than our go
// implementation.  we would need to put (persist.pkg) = "path/for/my/impl;impl_package";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";

message User {
  int64 id = 1;
  string name = 2;
  Friends friends = 3;
  google.protobuf.Timestamp created_on = 4;
}
message InsertUserReq {
  int64 id = 1;
  string name = 2;
  Friends friends = 3;
  google.protobuf.Timestamp created_on = 4;
}

message Friends {
  repeated string names = 1;
}

message SliceStringParam {
  repeated string slice = 1;
}
message FriendsReq {
  SliceStringParam names = 2;
}

message Empty{}
message Empty2{}

// the queries in this service contact a table that looks like this

// CREATE TABLE users (
// 	id INT64 NOT NULL,
// 	name STRING(MAX) NOT NULL,
// 	friends BYTES(MAX) NOT NULL,
// 	created_on STRING(MAX) NOT NULL,
// ) PRIMARY KEY (id)

service UServ {
  option (persist.service_type) = SPANNER;
  option (persist.mapping) = {
    types: [{
      proto_type_name: ".google.protobuf.Timestamp",
      proto_type: TYPE_MESSAGE
    },{
      proto_type_name: ".pb.SliceStringParam",
      proto_type: TYPE_MESSAGE
    }]
  };
  option (persist.ql) = {
    queries: [{
      name: "create_users_table",
      query: ["CREATE TABLE users(id integer PRIMARY KEY, name VARCHAR(50), friends BYTEA,",
      "created_on VARCHAR(50))"],
      in: ".pb.Empty",
      out: ".pb.Empty"
    }, {
      name: "insert_users",
      query: ["INSERT INTO users (id, name, friends, created_on) VALUES (@id, @name, @friends, @created_on)"],
      in: ".pb.User",
      out: ".pb.Empty",
    }, {
      name: "get_all_users",
      query: ["SELECT id, name, friends, created_on FROM users"],
      in: ".pb.Empty",
      out: ".pb.User"
    }, {
      name: "select_user_by_id",
      query: ["SELECT id, name, friends, created_on FROM users WHERE id = @id"],
      in: ".pb.User",
      out: ".pb.User"
    }, {
      name: "update_user_name",
      query: ["UPDATE users SET name = @name WHERE id = @id "],
      in: ".pb.User",
      out: ".pb.User"
    }, {
      name: "update_name_to_foo",
      query: ["UPDATE users SET name = 'foo' WHERE id = @id"],
      in: ".pb.User",
      out: ".pb.Empty"
    }, {
      query: ["SELECT id, name, friends, created_on ",
      "FROM users WHERE name IN UNNEST(@names)"],
      name: "get_friends",
      in: ".pb.FriendsReq",
      out: ".pb.User"
    },{
      query: ["drop table users"],
      name: "drop"
      in: ".pb.Empty",
      out: ".pb.Empty"
    }]
  };
  rpc CreateTable(Empty) returns (Empty) {
    option (persist.opts) = {
      query: "create_users_table"
    };
  };
  rpc InsertUsers(stream User) returns (Empty2) {
    option (persist.opts) = {
      query: "insert_users",
      before: true,
      after: true
    };
  };
  rpc GetAllUsers(Empty) returns (stream User) {
    option (persist.opts) = {
      query: "get_all_users",
      after: true,
      before: true
    };
  };
  rpc SelectUserById(User) returns (User) {
    option (persist.opts) = {
      query: "select_user_by_id"
    };
  };
  rpc UpdateUserNames(stream User) returns (stream User) {
    option (persist.opts) = {
      query: "update_user_name"
    };
  };
  rpc UpdateNameToFoo(User) returns (Empty) {
    option (persist.opts) = {
      query: "update_name_to_foo"
    };
  };
  rpc UpdateAllNames(Empty) returns (stream User) {};
  rpc GetFriends(FriendsReq) returns(stream User) {
    option (persist.opts) = {
      query: "get_friends"
    };
  };
  rpc DropTable(Empty) returns (Empty) {
    option (persist.opts) = {
      query: "drop"
    };
  };
}
