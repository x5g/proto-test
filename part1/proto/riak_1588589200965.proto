package Riak.PBC;

message RpbErrorResp {
    required bytes errmsg = 1;
    required uint32 errcode = 2;
}

message RpbGetServerInfoResp {
    optional bytes node = 1;
    optional bytes server_version = 2;
}

message RpbPair {
    required bytes key = 1;
    optional bytes value = 2;
}

message RpbGetClientIdResp {
    required bytes client_id = 1; // Client id in use for this connection
}

message RpbSetClientIdReq {
    required bytes client_id = 1; // Client id to use for this connection
}

message RpbGetReq {
    required bytes bucket = 1;
    required bytes key = 2;
    optional uint32 r = 3;
    optional uint32 pr = 4;
    optional bool basic_quorum = 5;
    optional bool notfound_ok = 6;
    optional bytes if_modified = 7;     // fail if the supplied vclock does not match
    optional bool head = 8;             // return everything but the value
    optional bool deletedvclock = 9;    // return the tombstone's vclock, if applicable
    optional uint32 timeout = 10;
    optional bool sloppy_quorum = 11;   // Experimental, may change/disappear
    optional uint32 n_val = 12;         // Experimental, may change/disappear
}

message RpbGetResp {
    repeated RpbContent content = 1;
    optional bytes vclock = 2;        // the opaque vector clock for the object
    optional bool unchanged = 3;
}

message RpbPutReq {
    required bytes bucket = 1;
    optional bytes key = 2;
    optional bytes vclock = 3;
    required RpbContent content = 4;
    optional uint32 w = 5;
    optional uint32 dw = 6;
    optional bool return_body = 7;
    optional uint32 pw = 8;
    optional bool if_not_modified = 9;
    optional bool if_none_match = 10;
    optional bool return_head = 11;
    optional uint32 timeout = 12;
    optional bool asis = 13;
    optional bool sloppy_quorum = 14;   // Experimental, may change/disappear
    optional uint32 n_val = 15;         // Experimental, may change/disappear
}

message RpbPutResp {
    repeated RpbContent content = 1;
    optional bytes vclock = 2;        // the opaque vector clock for the object
    optional bytes key = 3;           // the key generated, if any
}

message RpbDelReq {
    required bytes bucket = 1;
    required bytes key = 2;
    optional uint32 rw = 3;
    optional bytes vclock = 4;
    optional uint32 r = 5;
    optional uint32 w = 6;
    optional uint32 pr = 7;
    optional uint32 pw = 8;
    optional uint32 dw = 9;
    optional uint32 timeout = 10;
    optional bool sloppy_quorum = 11;   // Experimental, may change/disappear
    optional uint32 n_val = 12;         // Experimental, may change/disappear
}

// List buckets request
message RpbListBucketsReq {
    optional uint32 timeout = 1;
    optional bool stream = 2;
}

// List buckets response - one or more of these packets will be sent
// the last one will have done set true (and may not have any buckets in it)
message RpbListBucketsResp {
    repeated bytes buckets = 1;
    optional bool done = 2;
}

// List keys in bucket request
message RpbListKeysReq {
    required bytes bucket = 1;
    optional uint32 timeout = 2;
}

// List keys in bucket response - one or more of these packets will be sent
// the last one will have done set true (and may not have any keys in it)
message RpbListKeysResp {
    repeated bytes keys = 1;
    optional bool done = 2;
}

message RpbGetBucketReq {
    required bytes bucket = 1;
}

message RpbGetBucketResp {
    required RpbBucketProps props = 1;
}

message RpbSetBucketReq {
    required bytes bucket = 1;
    required RpbBucketProps props = 2;
}

message RpbMapRedReq {
    required bytes request = 1;
    required bytes content_type = 2;
}

message RpbMapRedResp {
    optional uint32 phase = 1;
    optional bytes response = 2;
    optional bool done = 3;
}

message RpbIndexReq {
    enum IndexQueryType {
        eq = 0;
        range = 1;
    }

    required bytes bucket = 1;
    required bytes index = 2;
    required IndexQueryType qtype = 3;
    optional bytes key = 4;
    optional bytes range_min = 5;
    optional bytes range_max = 6;
}

message RpbIndexResp {
    repeated bytes keys = 1;
}

message RpbContent {
    required bytes value = 1;
    optional bytes content_type = 2;     // the media type/format
    optional bytes charset = 3;
    optional bytes content_encoding = 4;
    optional bytes vtag = 5;
    repeated RpbLink links = 6;          // links to other resources
    optional uint32 last_mod = 7;
    optional uint32 last_mod_usecs = 8;
    repeated RpbPair usermeta = 9;       // user metadata stored with the object
    repeated RpbPair indexes = 10;       // user metadata stored with the object
    optional bool deleted = 11;
}

message RpbLink {
    optional bytes bucket = 1;
    optional bytes key = 2;
    optional bytes tag = 3;
}

message RpbBucketProps {
    optional uint32 n_val = 1;
    optional bool allow_mult = 2;
}

option optimize_for = SPEED;
