syntax = "proto3";

//protoc --go_out=plugins=grpc:. naturaeproto/Naturae.proto

option java_package = "com.examples.naturaeproto";
option go_package = "naturaeproto";

package naturaeproto;

service ServerRequests{
    rpc CreateAccount (CreateAccountRequest) returns(CreateAccountReply){}
    rpc Login (LoginRequest) returns(LoginReply){}
    rpc AccountAuthentication(AccountAuthenRequest) returns(AccountAuthenReply){}
    rpc GetNewAccessToken(GetAccessTokenRequest) returns (GetAccessTokenReply){}
    rpc SayHello (HelloRequest) returns (HelloReply){};
    rpc CreatePost (CreatePostRequest) returns (CreatePostReply){};
    rpc GetPostPreview(GetPostPreviewRequest) returns (GetPostPreviewReply);
    rpc GetPosts (GetPostRequest) returns (GetPostReply){};
    rpc SearchPost (SearchPostRequest) returns (SearchPostReply);
    rpc ForgetPassword (ForgetPasswordRequest) returns (ForgetPasswordReply){};
    rpc ForgetPasswordVerifyCode (ForgetPasswordVerifyCodeRequest) returns (ForgetPasswordVerifyCodeReply){};
    rpc ForgetPasswordResetPassword (ForgetPasswordNewPasswordRequest) returns (ForgetPasswordNewPasswordReply){};
    rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordReply){};
    rpc GetProfileImage (GetProfileImageRequest) returns (GetProfileImageReply){};
    rpc SetProfileImage(SetProfileImageRequest) returns (SetProfileImageReply){};

    /**** Friendslist gRPC Functions ****/
    // Query is sent to the server and a list of matching users is returned
    rpc SearchUsers(UserSearchRequest) returns (UserListReply){}
    // Unary client request to add a new friend for the user
    rpc AddFriend(FriendRequest) returns (FriendReply){}
    // Unary client request to remove an existing friend for the user
    rpc RemoveFriend(FriendRequest) returns(FriendReply){}

    /**** Chat gRPC Functions ****/
    //Ensures that the local and remote logs are up to date
    //rpc SyncChat(ChatlogRequest) returns (ChatlogReply){}
    //Sends a single message to update
    //rpc SendMessage(ChatMessageRequest) returns (ChatMessageReply){}

    rpc GetRoomName(RoomRequest) returns (RoomReply){}

}

message HelloRequest{
    string name =1;
}

message HelloReply{
    string message = 1;
}

message CreateAccountRequest{
    string appKey = 1;
    string email = 2;
    string password = 3;
    string firstName = 4;
    string lastName = 5;
}

message CreateAccountReply {
    Status status = 3;
}

message LoginRequest {
    string appKey = 1;
    string email = 2;
    string password = 3;
}

message LoginReply {
    string accessToken = 1;
    string refreshToken = 2;
    string firstName = 3;
    string lastName = 4;
    string email = 5;
    Status status = 6;
}

message AccountAuthenRequest {
    string appKey = 1;
    string firstName = 2;
    string email = 3;
    string authenCode = 4;
}

message AccountAuthenReply {
    string accessToken = 1;
    string refreshToken = 2;
    string firstName = 3;
    string lastName = 4;
    string email = 5;
    Status status = 6;
}

message CreatePostRequest {
    string appKey = 1;
    string accessToken = 2;
    string title = 3;
    string species = 4;
    string description = 5;
    float lat = 6;
    float lng = 7;
    string encodedImage = 8;
}

message CreatePostReply {
    Status status = 1;
}

message GetPostRequest {
    string appKey = 1;
    float lat = 2;
    float lng = 3;
}

message GetPostPreviewRequest{
    string appKey = 1;
    float lat = 2;
    float lng = 3;
    int32 radius = 4;
}

message GetPostPreviewReply{
    Status status = 1;
    repeated PostStruct reply = 2;
}

message GetPostReply{
    Status status = 1;
    repeated PostStruct reply = 2;
}

message PostStruct{
    string postID = 1;
    string title = 2;
    string species = 3;
    string description = 4;
    float latitude = 5;
    float longitude = 6;
    string encodedImage = 7;
}

message SearchPostRequest{
    string appKey = 1;
    string search = 2;
    string filterType = 3;
}

message SearchPostReply{
    Status status = 1;
    repeated PostStruct reply = 2;
}

message Status {
    int32 Code = 1;
    string Message = 2;
}

/** MESSAGES FOR FRIEND'S LIST **/
//Both values can be processed by the server to search for a list of users, their usage is mutually exclusive
//If the identifier for the user is used, their friendslist is returned, if a query is sent, all matching registered users are returned
message UserSearchRequest{
    // string appKey = 1;
    string user = 1;
    string query = 2;
}
//A list of users that matched the parameters provided by the UserSearchRequest
message UserListReply{
    repeated string users = 1;
    repeated string avatars = 2;
    Status status = 3;
}
// The request message containing the users's to perform an action on
message FriendRequest {
    //string appKey = 1;
    string sender = 1;
    string receiver = 2;
}

//The reply message from the server
message FriendReply{
    Status status = 1;
    // string accessToken = 1;
    //string refreshToken = 2;
}

//Ensures that the local and remote logs are up to date
//rpc SyncChat(ChatlogRequest) returns (ChatlogReply){}
/*
message ChatlogRequest{
   repeated ChatMessage = 1;
}
message ChatMessage{
   string userWhoSentIt = 1;
   string messageBody = 2;
   long timestampSent = 3;
}

message ChatlogReply{
   repeated ChatMessage = 1;
}
*/
message RoomRequest{
    string userOwner1 = 1;
    string userOwner2 = 2;
}

message RoomReply{
    string roomName = 1;
    Status status = 2;
}


message GetAccessTokenRequest{
    string appKey = 1;
    string refreshToken = 2;
}

message GetAccessTokenReply{
    string accessToken = 1;
    Status status = 2;
}

message ForgetPasswordRequest{
    string AppKey = 1;
    string email = 2;
}

message ForgetPasswordReply{
    Status status = 1;
}

message ForgetPasswordVerifyCodeRequest{
    string AppKey = 1;
    string Email = 2;
    string VerificationCode = 3;
}

message ForgetPasswordVerifyCodeReply{
    Status status = 1;
}

message ForgetPasswordNewPasswordRequest{
    string AppKey = 1;
    string Email = 2;
    string Password = 3;
}

message ForgetPasswordNewPasswordReply{
    Status status = 1;
}

message ChangePasswordRequest{
    string AppKey = 1;
    string AccessToken = 2;
    string CurrentPassword = 3;
    string NewPassword = 4;
}

message ChangePasswordReply{
    Status status = 1;
}
message SetProfileImageRequest{
    string AppKey = 1;
    string AccessToken = 2;
    string encodedImage = 3;
}

message SetProfileImageReply{
    Status status = 1;
}

message GetProfileImageRequest{
    string AppKey = 1;
    string AccessToken = 2;
}

message GetProfileImageReply{
    Status status = 1;
    string encodedImage = 2;
}

