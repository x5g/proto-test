// Copyright 2015 Rhythm & Hues Studios.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package louie;

option java_package = "com.rhythm.pb";
option java_outer_classname = "DataTypeProtos";
option java_generate_equals_and_hash = true;

// Inspired by:
// http://www.dataflow-software.com/files/dataflow-rpc.proto

message ParamPB {
    required string key = 1;
    optional string value = 2;
}

message MapPB {
    repeated ParamPB values = 1;
}

message DictionaryPB {
	//reserved to return a hash
	optional string key   = 1;
	repeated string value = 2;
	optional string type  = 3;
}

// Date
message DatePB {
        //[type=date]
        optional sint64 time = 1;
}
message DateListPB {
	//[type=date]
	repeated sint64 times = 1;
}

// DateTime
message DateTimePB {
        //[type=datetime]
        optional sint64 time = 1;
}
message DateTimeListPB {
        //[type=datetime]
	repeated sint64 times = 1;
}


// Bool
message BoolPB {
	optional bool value = 1;
}
message BoolListPB {
	repeated bool values = 1;
}

// Int
message IntPB {
	optional int32 value = 1;
}
message IntListPB {
	repeated int32 values = 1;
}

message UIntPB {
	optional int32 value = 1;
}
message UIntListPB {
	repeated int32 values = 1;
}

// Long
message LongPB {
	optional int64 value = 1;
}
message LongListPB {
	repeated int64 values = 1;
}

// String
message StringPB {
	optional string value = 1;
}
message StringListPB {
	repeated string values = 1;
}

// Float
message FloatPB {
	optional float value = 1;
}
message FloatListPB {
	repeated float values = 1;
}

// Double
message DoublePB {
	optional double value = 1;
}
message DoubleListPB {
	repeated double values = 1;
}

// Bytes
message BytesPB {
	optional bytes value = 1;
}
message BytesListPB {
	repeated bytes values = 1;
}