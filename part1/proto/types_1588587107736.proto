syntax = "proto3";

package ethereum.beacon.p2p.v1;

import "proto/common/messages.proto";

message BeaconState {
  // Validator registry [1-1000]
  repeated Validator validator_registry = 1;
  uint64 validator_registry_update_epoch = 2;
  repeated uint64 validator_balances = 3; // Balance in Gwei
  // Randomness and committees [1001-2000]
  repeated bytes latest_randao_mixes = 1004;
  uint64 previous_shuffling_start_shard = 1005;
  uint64 current_shuffling_start_shard = 1006;
  uint64 previous_shuffling_epoch = 1007;
  uint64 current_shuffling_epoch = 1008;
  bytes previous_shuffling_seed_hash32 = 1009;
  bytes current_shuffling_seed_hash32 = 1010;
  // Finality [2001-3000]
  uint64 previous_justified_epoch = 2001;
  bytes previous_justified_root = 2002;
  uint64 justified_epoch = 2003;
  bytes justified_root = 2004;
  uint64 justification_bitfield = 2005;
  uint64 finalized_epoch = 2006;
  bytes finalized_root = 2007;
  // Recent state [3001-4000]
  repeated Crosslink latest_crosslinks = 3001;
  repeated bytes latest_block_root_hash32s = 3003;
  repeated bytes batched_block_root_hash32s = 3004;
  repeated uint64 latest_slashed_balances = 3005;
  repeated PendingAttestation latest_attestations = 3006;
  repeated bytes latest_index_root_hash32s = 3007;
  BeaconBlock latest_block = 3008;
  // Ethereum 1.0 chain data [4001-5000]
  Eth1Data latest_eth1_data = 4001;
  repeated Eth1DataVote eth1_data_votes = 4002;
  uint64 deposit_index = 4003;
  // Miscellaneous [5001-6000]
  uint64 genesis_time = 5001;
  Fork fork = 5002;
  uint64 slot = 5003;
}

message Fork {
  uint64 previous_version = 1;
  uint64 current_version = 2;
  uint64 epoch = 3;
}

message PendingAttestation {
  AttestationData data = 1;
  bytes aggregation_bitfield = 2;
  bytes custody_bitfield = 3;
  uint64 inclusion_slot = 4;
}

message Attestation {
  AttestationData data = 1;
  bytes aggregation_bitfield = 2;
  bytes custody_bitfield = 3;
  bytes aggregate_signature = 4; // Type of [uint384] ?
}

message AttestationData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes beacon_block_root_hash32 = 3;
  bytes epoch_boundary_root_hash32 = 4;
  bytes crosslink_data_root_hash32 = 5;
  Crosslink latest_crosslink = 6;
  uint64 justified_epoch = 7;
  bytes justified_block_root_hash32 = 8;
}

message AttestationTarget {
  uint64 slot = 1;
  bytes block_root = 2;
  bytes parent_root = 3;
}

message AttestationDataAndCustodyBit {
  AttestationData data = 1;
  bool custody_bit = 2;
}

message Validator {
  bytes pubkey = 1;
  // TODO(781): The usage of withdrawal_credentials is not defined in spec. Not used in Prysm yet.
  bytes withdrawal_credentials_hash32 = 2;
  uint64 activation_epoch = 5;
  uint64 exit_epoch = 6;
  uint64 withdrawal_epoch = 7;
  uint64 slashed_epoch = 8;
  // Possible validator status code:
  // https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#constants
  enum StatusFlags {
    INITIAL = 0; // validator status initial value.
    INITIATED_EXIT = 1; // validator initiated exit.
    WITHDRAWABLE = 2; // validator deposit is withdrawable.
  }
  StatusFlags status_flags = 9;
}

message ShardReassignmentRecord {
  uint64 validator_index = 1;
  uint64 shard = 2;
  uint64 slot = 3;
}

message Crosslink {
  uint64 epoch = 1;
  bytes crosslink_data_root_hash32 = 2;
}

message BeaconBlock {
  uint64 slot = 1;
  bytes parent_root_hash32 = 2;
  bytes state_root_hash32 = 3;
  bytes randao_reveal = 4;
  Eth1Data eth1_data = 5;
  bytes signature = 6; // bytes96
  // Block Body
  BeaconBlockBody body = 7;
}

message BeaconBlockBody {
  repeated Attestation attestations = 1;
  repeated ProposerSlashing proposer_slashings = 2;
  repeated AttesterSlashing attester_slashings = 3;
  repeated Deposit deposits = 4;
  repeated VoluntaryExit voluntary_exits = 5;
}

message DepositInput {
  bytes pubkey = 1;
  bytes proof_of_possession = 2; // Type of ['uint384']??
  // TODO(781): The usage of withdrawal_credentials is not defined in spec. Not used in Prysm yet.
  bytes withdrawal_credentials_hash32 = 3;
}

message ProposalSignedData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes block_root_hash32 = 3;
}

message SlashableAttestation {
  repeated uint64 validator_indices = 1;
  bytes custody_bitfield = 2;
  AttestationData data = 3;
  bytes aggregate_signature = 4; // bytes96
}

message DepositData {
  DepositInput deposit_input = 1;
  uint64 amount = 2; // Amount in Gwei
  uint64 timestamp = 3;
}

message ProposerSlashing {
  uint64 proposer_index = 1;
  ProposalSignedData proposal_data_1 = 2;
  bytes proposal_signature_1 = 3; // bytes96
  ProposalSignedData proposal_data_2 = 4;
  bytes proposal_signature_2 = 5;
}

message AttesterSlashing {
  SlashableAttestation slashable_attestation_1 = 1;
  SlashableAttestation slashable_attestation_2 = 2;
}

message Deposit {
  repeated bytes merkle_proof_hash32s = 1;
  uint64 merkle_tree_index = 2;
  bytes deposit_data = 3;
}

message VoluntaryExit {
  uint64 epoch = 1;
  uint64 validator_index = 2;
  bytes signature = 3; // bytes96
}

message Eth1Data {
  bytes deposit_root_hash32 = 1;
  bytes block_hash32 = 2;
}

message Eth1DataVote {
  Eth1Data eth1_data = 1;
  uint64 vote_count = 2;
}
