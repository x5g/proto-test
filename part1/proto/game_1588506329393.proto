package game;

import "base.proto";

option java_package = "netmsg";

/* Client Out messages */

message FromClient {
  optional MWarp warp = 1;
  optional MMove move = 2;
  optional MAttack attack = 3;
  optional MSpecial special = 4;
  optional MMoveAttack move_attack = 5;

  optional MLeave leave = 1001;
  optional MToggleWaitingForRoundEnd toggle_waiting_for_round_end = 1002;
  optional MConcede concede = 1003;
}

message MLeave {}
message MConcede {}

enum WarpableKind {
  B_EXTRACTOR = 1;
  B_WARP_LINKER = 2;
  B_LASER_TOWER = 3;
  U_CORVETTE = 4;
  U_WASP = 5;
  U_SCOUT = 6;
  U_ROCKET_FRIGATE = 7;
  U_RAYSHIP = 8;
  U_GUNSHIP = 9;
  U_FORTRESS = 10;
  B_POPULATION_TOWER = 11;
  B_ACTION_TOWER = 12;
  U_WARP_PRISM = 13;
}

message MWarp {
  required base.Vect2 position = 1;
  required WarpableKind warpable = 2;
}

message MMove {
  required WObjID id = 1;
  // Does not include objects position. Ends with target position
  repeated base.Vect2 path = 2;
}

message MAttack {
  message Target {
    optional base.Vect2 target_pos = 1;
    optional WObjID target_id = 2;
  }

  required WObjID id = 1;
  required Target target = 2;
}

message MSpecial {
  required WObjID id = 1;
}

message MMoveAttack {
  required MMove move = 1;
  required MAttack.Target target = 2;
}

message MToggleWaitingForRoundEnd {}

/* Server Out messages */

message FromServer {
  optional MEvents events = 1;
  optional MError error = 2;

  optional MInit init = 1000;
}

message MJoined {
  required Player player = 1;
}

message MInit {
  message ExtractionSpeedRate {
    required WObject.Asteroid.ExtractionSpeed extraction_speed = 1;
    required uint32 resources_per_turn = 2;
  }

  required base.Bounds bounds = 1;
  repeated WObject objects = 2;
  repeated base.Vect2 warp_zone = 3;
  repeated base.Vect2 visible_points = 4;
  // Team in which the client is.
  required Team self_team = 5;
  repeated Team other_teams = 6;
  // Client player.
  required PlayerState self = 7;
  repeated InitPlayer other_players = 8;
  required WarpableObjectStats warpable_object_stats = 9;
  required Objectives objectives = 11;
  required TurnStartedEvt turn_started = 12;
  repeated ExtractionSpeedRate extraction_speed_rates = 13;
  required WorldID id = 14;
}

enum WObjKind {
  LIGHT = 1;
  MEDIUM = 2;
  ARMORED = 3;
  STRUCTURE = 4;
}

message MEvents {
  repeated Event events = 1;
}

message MError {
  required string error = 1;
}

/* Data */

message TeamID {
  required base.UUID id = 1;
}

message PlayerID {
  required base.UUID id = 1;
}

message OwnerID {
  optional TeamID team_id = 1;
  optional PlayerID player_id = 2;
}

message WorldID {
  required base.UUID id = 1;
}

message WObjID {
  required base.UUID id = 1;
}

message Team {
  required TeamID id = 1;
}

message Player { // {{{
  required string name = 1;
  required PlayerID id = 2;
  required TeamID team_id = 3;
} // }}}

message PlayerState { // {{{
  required uint32 resources = 1;
  required uint32 actions = 2;
  required bool turn_ended = 3;
  required base.ValWithMax population = 4;
} // }}}

message InitPlayer { // {{{
  required Player player = 1;
  optional PlayerState state = 2;
} // }}}

message WarpableObjectStats {
  // If stats are not sent, you cannot warp it in.
  optional WObjectStats.Extractor extractor = 6;
  optional WObjectStats.WarpLinker warp_linker = 7;
  optional WObjectStats.PopulationTower population_tower = 8;
  optional WObjectStats.LaserTower laser_tower = 9;
  optional WObjectStats.Corvette corvette = 10;
  optional WObjectStats.Wasp wasp = 11;
  optional WObjectStats.Scout scout = 12;
  optional WObjectStats.RayShip ray_ship = 13;
  optional WObjectStats.RocketFrigate rocket_frigate = 14;
  optional WObjectStats.Gunship gunship = 15;
  optional WObjectStats.Fortress fortress = 16;
  optional WObjectStats.Drone drone = 17;
  optional WObjectStats.WarpPrism warp_prism = 18;
  optional WObjectStats.ActionTower action_tower = 19;
}

message Objectives {
  optional uint32 gather_resources_left = 1;
  optional uint32 collect_vps_left = 2;
  optional uint32 destroy_all_critical_objects_left = 3;
}

message WObject { // {{{
  /* Trait properties */

  message Base {
    required WObjID id = 1;
    required base.Vect2 position = 2;
  }

  message OwnedObj {
    required OwnerID owner_id = 2;
    required uint32 hp = 3;
  }

  message Warpable {
    required uint32 warp_state = 2;
  }

  message Fighter {
    required uint32 attacksLeft = 2;
    required uint32 level = 3;
  }

  message Movable {
    required uint32 movement = 2;
  }

  /* Concrete implementations {{{ */

  message Asteroid {
    enum ExtractionSpeed {
      SLOW = 1;
      MEDIUM = 2;
      FAST = 3;
    }

    required WObjectStats.Asteroid stats = 1;
    required Base base = 2;

    required uint32 resources = 3;
    required ExtractionSpeed extraction_speed = 4;
  }
  
  message Rock {
    required WObjectStats.Rock stats = 1;
    required Base base = 2;
  }
  
  message Crystal {
    required WObjectStats.Crystal stats = 1;
    required Base base = 2;
  }
    
  message Brush {
    required WObjectStats.Brush stats = 1;
    required Base base = 2;
  }

  message WarpGate {
    required WObjectStats.WarpGate stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
  }

  message Extractor {
    required WObjectStats.Extractor stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
  }

  message PopulationTower {
    required WObjectStats.PopulationTower stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
  }

  message ActionTower {
    required WObjectStats.ActionTower stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
  }

  message WarpLinker {
    required WObjectStats.WarpLinker stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
  }

  message Spawner {
    required WObjectStats.Spawner stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
  }

  message LaserTower {
    required WObjectStats.LaserTower stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Fighter fighter = 5;
  }

  message Corvette {
    required WObjectStats.Corvette stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Fighter fighter = 5;
    required Movable movable = 6;
  }

  message WarpPrism {
    required WObjectStats.WarpPrism stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Movable movable = 5;
  }

  message Drone {
    required WObjectStats.Drone stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Movable movable = 5;
  }

  message Wasp {
    required WObjectStats.Wasp stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Fighter fighter = 5;
    required Movable movable = 6;
  }

  message Scout {
    required WObjectStats.Scout stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Movable movable = 6;
  }

  message RayShip {
    required WObjectStats.RayShip stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Fighter fighter = 5;
    required Movable movable = 6;
  }

  message RocketFrigate {
    required WObjectStats.RocketFrigate stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Fighter fighter = 5;
    required Movable movable = 6;
  }

  message RocketFrigateDeployed {
    required WObjectStats.RocketFrigateDeployed stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Fighter fighter = 5;
  }

  message Gunship {
    required WObjectStats.Gunship stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Fighter fighter = 5;
    required Movable movable = 6;
  }

  message Fortress {
    required WObjectStats.Fortress stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
    required Warpable warpable = 4;
    required Fighter fighter = 5;
    required Movable movable = 6;
  }

  message VpTower {
    required WObjectStats.VpTower stats = 1;
    required Base base = 2;

    required OwnedObj owned = 3;
  }

  /*** Message content - one of these should be set ***/

  optional Asteroid asteroid = 1;
  optional Rock rock = 2;
  optional Crystal crystal = 3;
  optional Brush brush = 4;
  optional WarpGate warp_gate = 5;
  optional Extractor extractor = 6;
  optional WarpLinker warp_linker = 7;
  optional Spawner spawner = 8;
  optional LaserTower laser_tower = 9;
  optional Corvette corvette = 10;
  optional Wasp wasp = 11;
  optional Scout scout = 12;
  optional RayShip ray_ship = 13;
  optional RocketFrigate rocket_frigate = 14;
  optional Gunship gunship = 15;
  optional Fortress fortress = 16;
  optional VpTower vp_tower = 17;
  optional PopulationTower population_tower = 18;
  optional Drone drone = 19;
  optional WarpPrism warp_prism = 20;
  optional ActionTower action_tower = 21;
  optional RocketFrigateDeployed rocket_frigate_deployed = 22;
} // }}}

message WObjectStats {
  /*** Traits ***/

  message Base {
    required bool blocks_movement = 1;
  }

  message SizedObj {
    required base.Vect2 size = 1;
  }

  message OwnedObj {
    required bool is_critical = 1;
    required uint32 visibility = 2;
    required uint32 max_hp = 3;
    required WObjKind kind = 4;
    required bool is_respawnable = 5;
    // Max amount of damage that it can per one hit - if not sent, no such limit exists.
    optional uint32 max_damage_per_hit = 6;
  }

  message GivingActions {
    required uint32 actions_given = 1;
  }

  message Warpable {
    enum Group {
      BUILDING = 1;
      UNIT = 2;
    }

    required uint32 warp_time = 1;
    required uint32 cost = 2;
    required uint32 population_cost = 3;
    required Group group = 4;
  }

  message SpecialAction {
    required uint32 actions_needed = 1;
  }

  message Fighter {
    message AttackOverride {
      required WObjKind kind = 1;
      required base.Range attack = 2;
    }

    required base.Range attack = 1;
    repeated AttackOverride attack_overrides = 2;
    required float attack_range = 3;
    required uint32 attacks = 4;
  }

  message Movable {
    required uint32 movement_range = 1;
  }

  message GivingPopulation {
    required uint32 population_given = 1;
  }

  /*** Concrete subtypes ***/

  message Asteroid {
    required Base base = 1;
  }

  message Rock {
    required Base base = 1;
  }

  message Crystal {
    required Base base = 1;
  }

  message Brush {
    required Base base = 1;
  }

  message WarpGate {
    required Base base = 1;
    required OwnedObj owned = 2;
    required SizedObj sized = 3;
    required GivingActions giving_actions = 4;
    required GivingPopulation giving_population = 5;
    required SpecialAction special_action = 6;
  }

  message Extractor {
    required Base base = 1;
    required OwnedObj owned = 2;
    required SpecialAction special_action = 3;
    required Warpable warpable = 4;
    required uint32 special_extracts_fixed = 5;
    // [0..1]
    required base.Rational special_extracts_percentage = 6;
  }

  message PopulationTower {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Warpable warpable = 3;
    required GivingPopulation giving_population = 4;
  }

  message ActionTower {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Warpable warpable = 3;
    required GivingActions giving_actions = 4;
  }

  message WarpLinker {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Warpable warpable = 3;
  }

  message Spawner {
    required Base base = 1;
    required OwnedObj owned = 2;
    required SizedObj sized = 3;
  }

  message LaserTower {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Fighter fighter = 3;
    required Warpable warpable = 4;
    required SpecialAction special_action = 5;
  }

  message Corvette {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Fighter fighter = 3;
    required Movable movable = 4;
    required SpecialAction special_action = 5;
    required Warpable warpable = 6;

    required uint32 special_movement_added = 10;
  }

  message WarpPrism {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Movable movable = 3;
    required SpecialAction special_action = 4;
    required Warpable warpable = 5;
  }

  message Drone {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Movable movable = 3;
    required Warpable warpable = 4;
  }

  message Wasp {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Fighter fighter = 3;
    required Movable movable = 4;
    required Warpable warpable = 5;
  }

  message Scout {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Movable movable = 3;
    required Warpable warpable = 4;
  }

  message RayShip {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Warpable warpable = 3;
    required Fighter fighter = 5;
    required Movable movable = 6;
  }

  message RocketFrigate {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Fighter fighter = 3;
    required Movable movable = 4;
    required Warpable warpable = 5;
    required SpecialAction special_action = 6;
  }

  message RocketFrigateDeployed {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Fighter fighter = 3;
    required SpecialAction special_action = 4;
  }

  message Gunship {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Fighter fighter = 3;
    required Movable movable = 4;
    required Warpable warpable = 5;
  }

  message Fortress {
    required Base base = 1;
    required OwnedObj owned = 2;
    required Fighter fighter = 3;
    required Movable movable = 4;
    required Warpable warpable = 5;
  }

  message VpTower {
    required Base base = 1;
    required SizedObj sized = 2;
    required OwnedObj owned = 3;
    required GivingActions giving_actions = 4;
  }
}

/* Events */

message Event { // {{{
  optional RoundStartedEvt round_started = 1;
  optional TurnStartedEvt turn_started = 2;
  optional PointOwnerMapChangeEvt point_owner_map_change = 3;
  optional WarpEvt warp = 4;
  optional ObjVisibleEvt obj_visible = 5;
  optional MoveEvt move = 6;
  optional AttackEvt attack = 7;
  optional MovementChangeEvt movement_change = 8;
  optional ObjAddedEvt obj_added = 9;
  optional ResourceChangeEvt resource_change = 10;
  optional ActionsChangeEvt actions_change = 11;
  optional WarpStateChangeEvt warp_change = 12;
  optional AttacksChangeEvt attacks_change = 13;
  // Player state
  optional WaitingForRoundEndChangeEvt waiting_for_round_end_change = 14;
  optional ObjDestroyedEvt obj_destroyed = 15;
  optional HPChangeEvt hp_change = 16;
  optional LevelChangeEvt level_change = 17;
  optional OwnerChangeEvt owner_change = 18;
  optional ObjectivesUpdateEvt objectives_update = 19;
  optional PopulationChangeEvt population_change = 20;
  optional AttackPosEvt attack_pos = 21;

  optional JoinEvt join = 1000;
  optional LeaveEvt leave = 1001;
  optional GameWonEvt game_won = 1002;
} // }}}

message JoinEvt {
  required InitPlayer player = 1;
}

message LeaveEvt {
  required PlayerID player_id = 1;
}

message RoundStartedEvt {
  /* Starts from 1 */
  required uint32 round_index = 1;
}

message TurnStartedEvt {
  required PlayerID player_id = 1;
  optional base.Timeframe turn_timeframe = 2;
}

message PointOwnerMapChangeEvt {
  enum Kind { 
    WARP_ZONE = 1;
    VISIBILITY = 2;
  }
  
  required Kind kind = 1;
  repeated base.Vect2 owned = 2;
  repeated base.Vect2 unowned = 3;
}

message WarpEvt {
  required WObject object = 1;
}

message ObjVisibleEvt {
  required WObject object = 1;
}

message ObjAddedEvt {
  enum Reason {
    DEFAULT = 1;
    DEPLOYMENT = 2;
  }

  required WObject object = 1;
  required Reason reason = 2;
}

message MoveEvt {
  required WObjID obj_id = 1;
  required base.Vect2 from = 2;
  required base.Vect2 to = 3;
  required uint32 moves_left = 4;
}

message AttackEvt {
  required WObjID attacker_id = 1;
  required WObjID defender_id = 2;
  required uint32 hp_left = 3;
  required Attack attack = 4;
}

message AttackPosEvt {
  required WObjID attacker_id = 1;
  required base.Vect2 target_pos = 2;
}

message Attack {
  required uint32 attacker_roll = 1;
  required bool is_critical = 2;
}

message MovementChangeEvt {
  required WObjID obj_id = 1;
  required uint32 new_movement = 2;
}

message HPChangeEvt {
  required WObjID obj_id = 1;
  required base.ValWithMax new_hp = 2;
}

message LevelChangeEvt {
  required WObjID obj_id = 1;
  required uint32 new_level = 2;
}

message ResourceChangeEvt {
  // One or other.
  optional WObjID obj_id = 1;
  optional PlayerID player_id = 2;
  required uint32 new_resources = 3;
}

message ActionsChangeEvt {
  required PlayerID player_id = 1;
  required uint32 new_actions = 2;
}

message WarpStateChangeEvt {
  required WObjID obj_id = 1;
  required uint32 new_warp_state = 2;
}

message AttacksChangeEvt {
  required WObjID obj_id = 1;
  required uint32 attacks_left = 2;
}

message WaitingForRoundEndChangeEvt {
  required PlayerID player_id = 1;
  required bool toggled = 2;
}

message ObjDestroyedEvt {
  enum Reason {
    DEFAULT = 1;
    /* The area is now visible and object that you were seeing was a ghost */
    VISIBILITY = 2;
    DEPLOYMENT = 3;
  }

  required WObjID obj_id = 1;
  required Reason reason = 2;
}

message OwnerChangeEvt {
  required WObjID obj_id = 1;
  required OwnerID new_owner_id = 2;
}

message ObjectivesUpdateEvt {
  required Objectives new_objectives = 1;
}

message GameWonEvt {
  required TeamID team_id = 1;
}

message PopulationChangeEvt {
  required PlayerID player_id = 1;
  required base.ValWithMax new_population = 2;
}
