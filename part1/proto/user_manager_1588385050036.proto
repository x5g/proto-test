import "lib/protocol/attribute.proto";
import "lib/protocol/entity.proto";
import "lib/rpc/rpc.proto";

package bnet.protocol.user_manager;

option cc_generic_services = true;

message PlayerReport {
  enum UserComplaintCode {
    USER_COMPLAINT_SPAM = 0;
    USER_COMPLAINT_HARASSMENT = 1;
    USER_COMPLAINT_REAL_LIFE_THREAT = 2;
    USER_COMPLAINT_INAPPROPRIATE_NAME = 3;
    USER_COMPLAINT_HACKING = 4;
    USER_COMPLAINT_ANY = 5;
  }
  required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
  required string complaint_note = 2;
}

message RecentPlayer {
  required .bnet.protocol.EntityId player = 1;
  optional fixed64 timestamp_played = 2;
  repeated .bnet.protocol.attribute.Attribute attributes = 3;
}

message SubscribeToUserManagerRequest {
  required uint64 object_id = 1;
}

message SubscribeToUserManagerResponse {
  repeated .bnet.protocol.EntityId blocked_users = 1;
  repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
}

message ReportPlayerRequest {
  required .bnet.protocol.EntityId target_id = 1;
  required .bnet.protocol.user_manager.PlayerReport report = 2;
}

message ReportPlayerResponse {
  optional .bnet.protocol.EntityId reported_user = 1;
}

message CheckPlayerBlockRequest {
  required .bnet.protocol.EntityId target_id = 1;
}

message CheckPlayerBlockResponse {
  optional .bnet.protocol.EntityId blocked_user = 1;
}

message BlockPlayerRequest {
  required .bnet.protocol.EntityId target_id = 1;
}

message BlockPlayerResponse {
  optional .bnet.protocol.EntityId blocked_user = 1;
}

message RemovePlayerBlockRequest {
  required .bnet.protocol.EntityId target_id = 1;
}

message RemovePlayerBlockResponse {
  optional .bnet.protocol.EntityId blocked_user = 1;
}

message AddRecentPlayersRequest {
  repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
}

message AddRecentPlayersResponse {
  repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
  repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
}

message RemoveRecentPlayersRequest {
  repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
}

message RemoveRecentPlayersResponse {
  repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
}

message BlockedPlayerNotification {
  repeated .bnet.protocol.EntityId players = 1;
}

service UserManagerService {
  rpc SubscribeToUserManager(.bnet.protocol.user_manager.SubscribeToUserManagerRequest) returns (.bnet.protocol.user_manager.SubscribeToUserManagerResponse);
  rpc ReportPlayer(.bnet.protocol.user_manager.ReportPlayerRequest) returns (.bnet.protocol.user_manager.ReportPlayerResponse);
  rpc BlockPlayer(.bnet.protocol.user_manager.BlockPlayerRequest) returns (.bnet.protocol.user_manager.BlockPlayerResponse);
  rpc RemovePlayerBlock(.bnet.protocol.user_manager.RemovePlayerBlockRequest) returns (.bnet.protocol.user_manager.RemovePlayerBlockResponse);
  rpc AddRecentPlayers(.bnet.protocol.user_manager.AddRecentPlayersRequest) returns (.bnet.protocol.user_manager.AddRecentPlayersResponse);
  rpc RemoveRecentPlayers(.bnet.protocol.user_manager.RemoveRecentPlayersRequest) returns (.bnet.protocol.user_manager.RemoveRecentPlayersResponse);
}

service UserManagerNotify {
  rpc NotifyPlayerBlocked(.bnet.protocol.user_manager.BlockedPlayerNotification) returns (.bnet.protocol.NO_RESPONSE);
  rpc NotifyPlayerBlockRemoved(.bnet.protocol.user_manager.BlockedPlayerNotification) returns (.bnet.protocol.NO_RESPONSE);
}

