syntax = "proto2";

package zhu.room;

//房间状态
enum RoomStatus { 
	WAIT = 0;														//等待
	DESTORYE = 1;													//销毁
	START = 2;														//开始
	FULL = 3;														//人满
} 

//返回代码
enum ERROR_CODE { 
	SUCCESS = 0;													//成功
	ROOM_NOT_EXIST = 1;												//房间不存在
	ROOM_USER_FULL_ERROR = 2;										//人满
	CREATE_ROOM_ERROR = 3;											//创建房间失败
	PLAYER_NOT_IN_ROOM = 4;											//用户不在房间中
	PLAYER_HAS_IN_ROOM = 5;											//用户已经在房间中
	PLAYER_HAS_READY = 6;											//用户已经准备
	SERVER_ERROR = 7;
}

//房间座位
message Seat {
	enum SeatStatus {
		UNREADY = 0;												//未准备
		READY = 1;													//准备
		NO_PLAYER = 2;												//无玩家
	}
	required SeatStatus statu = 1 [default = NO_PLAYER];			//座位状态
	required uint32 position = 2;									//座位号
	optional int32 socket = 3;										//玩家socket
	optional bytes playerAccount =4;								//玩家账号
}

//房间
message Room {
	required uint32 id = 1;											//房间id
	required bytes roomName = 2;									//房间名
	required uint32 userCount = 3;									//玩家数
	optional RoomStatus status = 4;									//房间状态
	optional Seat seat1 = 5;										//座位1
	optional Seat seat2 = 6;										//座位2
	optional Seat seat3 = 7;										//座位3
}

//获取房间请求
message GetRoomReq {
	required bytes account = 1;										//请求账号
}

//获取房间请求
message GetRoomResp {	
	required uint32 count = 1;										//房间数量
	repeated Room room = 2;											//所有房间
}

//离开房间请求
message LeaveRoomReq {
	required bytes account = 1;										//离开房间账号
	required uint32 roomId = 2;										//离开房间id
}

//离开房间响应
message LeaveRoomResp {
	required ERROR_CODE leaveRoomResult = 1;
}

//进入房间请求
message EnterRoomReq {
	required bytes account = 1;										//进入房间账号
	required uint32 roomId = 2;										//进入房间id
}

//进入房间响应
message EnterRoomResp {
	required ERROR_CODE enterResult = 1;
	optional Room roomInfo = 2;
	optional bytes desc = 3;
	optional uint32 position = 4;
}

//创建房间请求
message CreateRoomReq {
	required bytes account = 1;					//创建房间账号
}

//创建房间响应
message CreateRoomResp {
	required ERROR_CODE createResult = 1;
	optional bytes desc = 2;					//消息
	optional Room createRoom = 3;				//成功创建的房间
}

//准备请求
message ReadyReq {
	required bytes account = 1;										//准备账号
	required uint32 roomid = 2;										//房间id
	required bool ready = 3;										//是否准备
}

//准备响应
message ReadyResp {
	required ERROR_CODE readyResult = 1;
	optional bytes account = 2;					// 账号
	optional uint32 position = 3;				// 位置
	optional bool ready = 4;					// 是否准备
	optional bytes desc = 5;					// 消息
}

//游戏结束消息
message GameOverMsg {
	required uint32 roomid = 1;										//房间id
	optional bytes winFirstAccount = 2;
	optional bytes winSecondAccount = 3;
	optional bytes loseFirstAccount = 4;
	optional bytes loseSecondAccount = 5;
}

//房间用户数改变
message RoomUserCountChangeNotify {
	required uint32 id = 1;
	required uint32 count = 2;
}

//房间状态改变
message RoomGameStatuChangeNotify {
	required uint32 id = 1;
	required bool start = 2;
}