/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "org.apache.ratis.logservice.proto";
option java_outer_classname = "MetaServiceProtos";
option java_generate_equals_and_hash = true;
package ratis.logservice;
import "LogService.proto";


// Basic Ratis messages
message RaftPeerProto {
  bytes id = 1;      // id of the peer
  string address = 2; // e.g. IP address, hostname etc.
}

message RaftGroupProto {
  bytes id = 1;      // id of the group
  repeated RaftPeerProto peers = 2; //list of the peers.
}


//Basic Log Service messages
message LogInfoProto {
  LogNameProto logname = 1;
  RaftGroupProto raftGroup = 2;
}


message CreateLogRequestProto {
  LogNameProto logName = 1;
}

message ListLogsRequestProto {
  repeated LogStreamProto logSreams = 1;
}

message GetLogRequestProto {
  LogNameProto logName = 1;
}

message DeleteLogRequestProto {
  LogNameProto logName = 1;
}

message CreateLogReplyProto {
  LogInfoProto log = 1;
  MetaServiceExceptionProto exception = 2;
}

message GetLogReplyProto {
  LogInfoProto log = 1;
  MetaServiceExceptionProto exception = 2;
}

message ListLogsReplyProto {
  repeated LogInfoProto logs = 1;
  MetaServiceExceptionProto exception = 2;

}

message DeleteLogReplyProto {
  MetaServiceExceptionProto exception = 1;
}

// Basic wrapper for the exception
message MetaServiceExceptionProto {
  string exceptionClassName = 1;
  string errorMsg = 2;
  bytes stacktrace = 3;
}

// Meta Messages
message LogServiceRegisterLogRequestProto {
  LogNameProto logname = 1;
  RaftGroupProto raftGroup = 2;
}

message LogServiceRegisterLogReplyProto {
  RaftGroupProto raftGroup = 1;
}

message LogServiceUnregisterLogRequestProto {
  LogNameProto logname = 1;
}

message LogServiceUnregisterLogReplyProto {
}

message LogServicePingRequestProto {
  RaftPeerProto peer = 1;
}

message LogServiceHeartbeatRequestProto {
  RaftPeerProto peer = 1;
}

message LogServiceHeartbeatReplyProto {
}

// Internal StateMachine change request
// includes: all operations with workers and raft groups.
message MetaSMRequestProto {
  oneof Type {
    LogServicePingRequestProto pingRequest = 1;
    LogServiceRegisterLogRequestProto registerRequest = 2;
    LogServiceUnregisterLogRequestProto unregisterRequest = 3;
    LogServiceHeartbeatRequestProto heartbeatRequest = 4;
  }
}

message MetaServiceRequestProto {
  oneof Type {
    CreateLogRequestProto createLog = 1;
    ListLogsRequestProto listLogs = 2;
    GetLogRequestProto getLog = 3;
    ArchiveLogRequestProto archiveLog = 4;
    DeleteLogRequestProto deleteLog = 5;
  }
}







