// This file deinfes a fundamental protocal for BFT raft impelmentation
// For details of this protocal please refer:
// http://www.scs.stanford.edu/14au-cs244b/labs/projects/copeland_zhong.pdf

syntax = "proto3";
package server;

service BFTRaft {
    rpc ExecCommand (CommandRequest) returns (CommandResponse) {}
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
    rpc ApproveAppend (AppendEntriesResponse) returns (ApproveAppendResponse) {}
    rpc GroupHosts (GroupId) returns (GroupNodesResponse) {}
    rpc GroupMembers (GroupId) returns (GroupMembersResponse) {}
    rpc GetGroupLeader (GroupId) returns (GroupLeader) {}
    rpc GetGroupContent (GroupId) returns (RaftGroup) {}
    rpc PullGroupLogs (PullGroupLogsResuest) returns (LogEntries) {}
    rpc SendGroupInvitation (GroupInvitation) returns (Nothing) {}
}

message CommandRequest {
    uint64 group = 1;
    uint64 client_id = 2;
    uint64 request_id = 3;
    uint64 func_id = 4;
    bytes signature = 5;
    bytes arg = 6;
}

message CommandResponse {
    uint64 group = 1;
    uint64 leader_id = 2;
    uint64 node_id = 3;
    uint64 request_id = 4;
    bytes signature = 5;
    bytes result = 6;
}

message LogEntry {
    uint64 term = 1;
    uint64 index = 2;
    bytes hash = 3;
    CommandRequest command = 4;
}

message RequestVoteRequest {
    uint64 group = 1;
    uint64 term = 2;
    uint64 log_index = 3;
    uint64 log_term  = 4;
    uint64 candidate_id = 5;
    bytes signature = 6;
}

message RequestVoteResponse {
    uint64 group = 1;
    uint64 term = 2;
    uint64 log_index = 3;
    uint64 candidate_id = 5;
    uint64 voter = 6;
    bool granted = 7;
    bytes signature = 8;
}

message AppendEntriesRequest {
    uint64 group = 1;
    uint64 term = 2;
    uint64 leader_id = 3;
    uint64 prev_log_index = 4;
    uint64 prev_log_term = 5;
    bytes signature = 6;
    repeated RequestVoteResponse quorum_votes = 7;
    repeated LogEntry entries = 8;
}

message AppendEntriesResponse {
    uint64 group = 1;
    uint64 term = 2;
    uint64 index = 3;
    uint64 peer = 4;
    bool successed = 5;
    bool convinced = 6;
    bytes hash = 7;
    bytes signature = 8;
}

message Peer {
    uint64 id = 1;
    uint64 group = 2;
    uint64 next_index = 4;
    uint64 match_index = 5;
}

message Host {
    uint64 id = 1;
    uint64 last_seen = 2;
    bool online = 3;
    string server_addr = 4;
    bytes public_key = 5;
}

message RaftGroup {
    uint32 replications = 1;
    uint64 id = 2;
    uint64 term = 4;
    // repeated uint64 peers = 4; Can be searched from the database buy scanning
}

message ServerConfig {
    bytes private_key = 1;
}

message ApproveAppendResponse {
    uint64 group = 1;
    uint64 peer = 2;
    uint64 index = 3;
    bool appended = 4;
    bool delayed = 5;
    bool failed = 6;
    bytes signature = 7;
}

message GroupId {
    uint64 group_id = 1;
}

message GroupNodesResponse {
    repeated Host nodes = 1;
    bytes signature = 2;
}

message GroupMember {
    Host host = 1;
    Peer peer = 2;
}

message GroupMembersResponse {
    LogEntry last_entry = 2;
    repeated GroupMember members = 3;
    bytes signature = 4;
}

message PullGroupLogsResuest {
    uint64 group = 1;
    uint64 index = 2;
}

message LogEntries {
    repeated LogEntry entries = 1;
    bytes signature = 2;
}

message NodeJoinGroupEntry {
    uint64 group = 1;
}

message GroupLeader {
    Host node = 1;
    bool Accuate = 2;
    bytes signature = 3;
}

message GroupInvitation {
    uint64 group = 1;
    uint64 leader = 2;
    uint64 node = 3;
    bytes signature = 4;
}

message RaftGroupNodes {
    repeated Host nodes = 1;
}

message Nothing {}