package Room;

message OneShotSettleNotify
{
    message player 
    {
        optional int32 player_id = 1;
        optional int32 coin = 2;
        optional int32 coinBalance = 3;
    }
    repeated player players=1;
}

message IntrustReq
{
    optional int32 action = 1;// 1 代表申请  2 代表取消托管状态
}

message IntrustRsp
{
    optional int32 status = 1;// 1 代表托管状态  0 代表取消托管状态
}

message IntrustNotify
{
    optional int32 player_id = 1;
    optional int32 status = 2;// 1 代表托管状态  0 代表取消托管状态
}


message Poker
{
    required int32 Color = 1;
    required int32 Number = 2;
}

message PokersOfPlayer
{
    repeated Poker Pokers = 1;
	optional int32 curRoundNum = 2;
    optional int32 restTime = 3 ;
}

message PokersOfMatchingReq
{
    required int32 userID = 10;
    required Poker poker1 = 1; 
    required Poker poker2 = 2;
    required Poker poker3 = 3;
    required Poker poker4 = 4;
    required Poker poker5 = 5;
    required Poker poker6 = 6;
    required Poker poker7 = 7;
    required Poker poker8 = 8;
    required Poker poker9 = 9;
}

message PokersOfMatchingRsp
{
    required int32 err_no = 1;
    repeated Poker pokers = 2;
}

message PokersOfSubmitReq
{
    required Poker poker1 =1;
    required Poker poker2 =2;
    required Poker poker3 =3;
    required Poker poker4 =4;
    required Poker poker5 =5;
    required Poker poker6 =6;
    required Poker poker7 =7;
    required Poker poker8 =8;
    required Poker poker9 =9;
    required Poker poker10 =10;
    required Poker poker11 =11;
    required Poker poker12 =12;
    required Poker poker13 =13;
    required int32 pokerType = 14;
    required int32 userID = 15;
}

message PokersOfSubmitRsp
{
    optional int32 errno = 1;
}

message AllKilledPlayer
{
    required int32 player_id = 1; //通杀玩家ID
    required int32 score = 2;
}

message KilledPlayer
{
    required int32 source_player_id = 1;
    required int32 player_id = 2;
    required int32 score = 3;
}

message SpadeAPlayer
{
    required int32 player_id = 1;
    required int32 score = 2;
}

message ResultOfPlayer
{
    required int32 userID = 1;
    required int32 seatNum = 2; 
    repeated Poker pokers = 3;
    repeated int32 scoreOfPokers = 4;
    required int32 finalScoreOfPokers = 5; //牌道实际得分，用于小结算
    optional int32 scoreOfXipai = 6;
    optional int32 scoreOfRound = 7;
    required int32 totalScore = 8;
    repeated int32 typeOfXipai = 9;
    required bool isSurrender = 10;
    required int32 curScore = 11;
  	repeated int32 XipaiScores = 12; //每种喜牌的得分
    repeated int32 typeOfPokers = 13;
    required int32 finalScore = 14; //小局最终得分
    optional int32 spadeAPlayerID = 15;
    optional int32 spadeAScore = 16; 
    optional int32 killScore = 17;
    optional int32 allKillScore = 18;
    required int32 resultScore = 19; //(用于小结算界面的分数)
    optional int32 coinBalance = 20; //当前的金币数
    optional int32 coin = 21;        //实际结的金币数
    optional int32 restCoin = 22;    //未结清的金币数
}

message ConfirmBroadcast
{
    required int32 seatNum = 1;
    required int32 userID = 2;
}

message ResultOfComparing
{
    required string err_no = 1;
    repeated ResultOfPlayer players = 2;  
    required int32 curRoundNum = 3; 
    repeated KilledPlayer killedPlayerList = 4; 
    repeated AllKilledPlayer allKillScore = 5;
    repeated SpadeAPlayer spadeAPlayerList = 6;
    required int32 spadeAPlayerID = 7;
    optional int32 baseCoinScore = 8;
    optional int32 feeNum = 9;
}

message SurrenderReq
{
    required int32 userID = 1;
}

message TableSurrender
{
    required int32 userID = 1;
}

message PosInfo
{
	  required int32 pos_index = 1;	//座位号
	  required int32 player_id = 2;	//座位号对应的玩家ID,没有玩家则为0
	  required int32 is_ready = 3;  //座位上入住的玩家是否准备就绪(1:准备 0:未准备),没有玩家值也为0
}

//同步到期信息(state 0:房间等待准备状态 1:定庄状态 2:下注状态 3:等待结算状态)
message ExpiresInfo
{
	required int32 state = 1;
  	required int32 expire = 2;  //到期时间
}

//暂离请求
message TemporaryLeaveReq
{
	required bool is_temporary_leave = 1;	
  	required int32 player_id = 2; 
}

message TemporaryLeaveRsp
{
	required string err_no = 1;		
}

//暂离广播
message TemporaryLeaveBroadcast
{
	required int32 player_id = 1;
	required bool is_temporary_leave = 2;
}

message RoomInfo
{  
    required string roomNum = 1;         //房间号
    required int32 ruleType = 2;      //房间类型
    required int32 totalRoundCount = 3;    //房间总局数
    required int32 curRoundNum = 4;      //当前第几局
    required int32 state = 5;    //0:房间等待准备状态 1:定庄状态 2:下注状态 3:等待结算状态
    required int32 serverNow = 6;    //服务器当前时间戳
}

message RoomInformation
{
    required int32 roomNum = 1;
    required int32 roomHostID=2;
    required int32 curRoundNum=3;
    required int32 totalRoundNum=4;
    required int32 roomStatus=5;
    required int32 serverNow=6;
    optional int32 roomId = 7; 
    optional int32 baseCoinScore = 8;
    optional int32 restTime = 9;
    optional int32 feeNum=10;
}

message SeatInformation
{
    required int32 seatNum = 1;      //座位索引
    required int32 userID = 2;    //坐下的玩家(isSeat==true时有效)
    required int32 readyStatus =3;
    required int32 curScore=4;
    required bool isConfirmed=5;
    required bool isOffline=6;
    required bool isTemporaryLeave = 7;
    required int32 gameCount = 8;
    optional int32 coinBalance = 9; //当前的金币数
    optional int32 instrustStatus =10;//托管状态
}


message LastSettleAccounts
{
    required int32 userId = 1;
    required int32 totalScore = 2;          //总结算积分
    required int32 xipaiCount = 3;        //次数
    optional int32 soloKillCount = 4;  
    optional int32 allKillCount = 5; 
    optional int32 spadeACount = 6;        
    repeated int32 paiWinCountList = 7; 
    optional string startTime = 8; 
    optional string endTime = 9;  
    optional int32 totalCoin = 10;
    optional int32 totalRestCoin = 11;          
}

message  LastSettleAccountsBroadcast
{
    repeated LastSettleAccounts LastSettleAccounts = 1;
    optional int32 free_sponsor=20;
}

//聊天消息
message ChatMsg
{
	  required int32 msgType = 1;		//消息类型，0:快捷短语,1:表情,2:语音
	  required string text = 2;		//消息内容，当msgType==0时，为快捷短语id，当msgType==1时，为表情id;当msgType==2时为语音id
}


message FreeRoomState
{
  	required int32 player_id = 1;	
	required int32 sponsor = 2;		//发起者player_id
	optional bool agree = 3;			//是否是同意，当isAnswered为true是有效
}

//-----------------------------------------------------------------------------------------
message RoomListReq
{
	
}

message RoomListRsp
{
	repeated RoomInfo list = 1;
}

message EnterReq
{
	required int32 room_id = 1;	
	required int32 pos_index = 2;
}

message EnterRsp
{
	required string err_no = 1;
    optional RoomInformation roomInfo = 2;
	repeated SeatInformation seatInfo = 3;    //已经在房间中玩家
    required int32 isJoinAfterStart=4;
	//repeated PosInfo pos_infos = 2;	//座位信息
}

message LeaveReq
{
    required int32 userID=1;
}

message LeaveRsp
{
	required string err_no = 1;
}


message ReadyReq
{
    required int32 userID=2;
	required int32 isReady = 1;
}


message ReadyRsp
{
	required string err_no = 1;
}

message CheckReq
{
	required int32 player_id = 1;
}

message CheckRsp
{
	required int32 room_id = 1;
}


message StartReq
{

}

message StartRsp
{
	required string err_no = 1;
}


//解散房间,只有在从未开始过一局游戏时有效
message FreeReq
{
	required bool agree = 1;		//agree==true，请求解散房间或同意解散房间；false，拒绝解散
}

message FreeRsp
{
	required string err_no = 1;
	optional bool agree = 2;		//我是否同意的状态
}

message OwnerChangeBroadcast
{
    required int32 userid = 1;
    required int32 seatnum = 2;
    required int32 playernum = 3; 
}

message KickPlayerExpire
{
    required int32 expire = 1;  
}


message KickPlayerReq
{
	required int32 player_id = 1;
}

message KickPlayerRsp
{
	required string err_no = 1;
}

message ChatMsgReq
{
	required ChatMsg chatMsg = 1;
}

message ChatMsgRsp
{
	required string err_no = 1;		//成功时 =="0"
}

message CustomInfo
{
    required int32 player_id = 1;
    required string customInfo = 2;
}

//座位自定义信息变化请求
message CustomInfoChangeReq
{
    required string customInfo = 1;
}

//座位自定义信息变化响应
message CustomInfoChangeRsp
{
    required string err_no = 1;      
}

//座位自定义信息变化广播
message CustomInfoChangeBroadcast
{
    repeated CustomInfo customInfoList = 1;
}



message ReconnectInfo
{
    required int32 reconnectStatus = 1;
    required RoomInformation roomInfo = 2;
    repeated SeatInformation seatInfo = 3; 
    repeated Poker pokers = 4;
    repeated ResultOfPlayer players = 5;
    repeated KilledPlayer killedPlayerList = 6; 
    repeated AllKilledPlayer allKillScore = 7;
    repeated SpadeAPlayer spadeAPlayerList = 8;
    required int32 spadeAPlayerID = 9;
    required int32 isJoinAfterStart = 10;
    optional int32 playercnt = 11;
    optional int32 gametype = 12;
}

message EnterBroadcast
{
	required SeatInformation seatInfo = 1;			//新进入房间玩家广播
    optional int32 playercnt = 2;
}

message ReadyBroadcast
{
	required PosInfo pos_info = 1;			//玩家准备,广播
}


message StartBroadcast
{
	required string err_no = 1;				//开始游戏,广播
}

message ResetBroadcast
{
	repeated PosInfo pos_infos = 1;
}

message SynchronizeBroadcast
{
	

}


message SynExpireBroadcast
{
	repeated ExpiresInfo expires = 1;
}

message ReconnBroadcast
{
	required int32 player_id = 1;
}


message DisconnBroadcast
{
	required int32 player_id = 1;
}

message CreateBroadcast
{
	required string err_no = 1;
}

message FreeBroadcast
{	
	repeated FreeRoomState freeRoomStateList = 1;	
	required int32 expire = 2;  //到期时间
	
}

message FreeSuccessBroadcast
{	
}



message KickPlayerBroadcast
{
	required int32 player_id = 1;
}

message LeaveBroadcast
{
	required int32 player_id = 1;
    optional int32 playercnt = 2;
}

//聊天广播
message ChatMsgBroadcast
{
	required int32 player_id = 1;		//发消息者的id
	required ChatMsg chatMsg = 2;
}


message KickPlayerNotify
{
    required string err_no = 1;
}

message RoomAwardMessage
{
    required uint64 UserID = 1; // 获得奖励的玩家的ID
    required string Message = 2; // 奖励信息（由运营系统和客户端协商格式）
}