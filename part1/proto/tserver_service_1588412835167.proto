// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
syntax = "proto2";

package yb.tserver;

option java_package = "org.yb.tserver";

import "yb/common/common.proto";
import "yb/tserver/tserver.proto";
import "yb/tablet/metadata.proto";

service TabletServerService {
  rpc Write(WriteRequestPB) returns (WriteResponsePB);
  rpc Read(ReadRequestPB) returns (ReadResponsePB);
  rpc NoOp(NoOpRequestPB) returns (NoOpResponsePB);
  rpc ListTablets(ListTabletsRequestPB) returns (ListTabletsResponsePB);
  rpc GetLogLocation(GetLogLocationRequestPB) returns (GetLogLocationResponsePB);

  // Run full-scan data checksum on a tablet to verify data integrity.
  //
  // TODO: Consider refactoring this as a scan that runs a checksum aggregation
  // function.
  rpc Checksum(ChecksumRequestPB) returns (ChecksumResponsePB);

  rpc ListTabletsForTabletServer(ListTabletsForTabletServerRequestPB)
      returns (ListTabletsForTabletServerResponsePB);

  rpc ImportData(ImportDataRequestPB) returns (ImportDataResponsePB);
  rpc UpdateTransaction(UpdateTransactionRequestPB) returns (UpdateTransactionResponsePB);
  // Returns transaction status at coordinator, i.e. PENDING, ABORTED, COMMITTED etc.
  rpc GetTransactionStatus(GetTransactionStatusRequestPB) returns (GetTransactionStatusResponsePB);
  // Returns transaction status at participant, i.e. number of replicated batches or whether it was
  // aborted.
  rpc GetTransactionStatusAtParticipant(GetTransactionStatusAtParticipantRequestPB)
      returns (GetTransactionStatusAtParticipantResponsePB);
  rpc AbortTransaction(AbortTransactionRequestPB) returns (AbortTransactionResponsePB);
  rpc Truncate(TruncateRequestPB) returns (TruncateResponsePB);
  rpc GetTabletStatus(GetTabletStatusRequestPB) returns (GetTabletStatusResponsePB);
  rpc GetMasterAddresses(GetMasterAddressesRequestPB) returns (GetMasterAddressesResponsePB);

  rpc Publish(PublishRequestPB) returns (PublishResponsePB);

  rpc IsTabletServerReady(IsTabletServerReadyRequestPB) returns (IsTabletServerReadyResponsePB);

  // Takes precreated transaction from this tserver.
  rpc TakeTransaction(TakeTransactionRequestPB) returns (TakeTransactionResponsePB);
}

message GetLogLocationRequestPB {
}

message GetLogLocationResponsePB {
  optional string log_location = 1;
}

message ChecksumRequestPB {
  reserved 1, 2, 3, 4, 5;

  optional bytes tablet_id = 6;
  optional YBConsistencyLevel consistency_level = 7;
}

message ChecksumResponsePB {
  reserved 3, 4, 5;

  // Error message, if any.
  optional TabletServerErrorPB error = 1;

  // The (possibly partial) checksum of the tablet data.
  // This checksum is only complete if 'has_more_results' is false.
  optional uint64 checksum = 2;
}

message ListTabletsForTabletServerRequestPB {
}

message ListTabletsForTabletServerResponsePB {
  // An entry for each tablet.
  message Entry {
    optional string table_name = 1;
    optional bytes tablet_id = 2;
    optional bool is_leader = 3;
    optional tablet.RaftGroupStatePB state = 4;
    optional uint64 num_sst_files = 5;
    optional uint64 num_log_segments = 6;
    optional uint64 num_memtables_intents = 7;
    optional uint64 num_memtables_regular = 8;
  }

  repeated Entry entries = 1;
}

message ImportDataRequestPB {
  optional string tablet_id = 1;
  optional string source_dir = 2;
}

message ImportDataResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;
}

message UpdateTransactionRequestPB {
  optional bytes tablet_id = 1;
  optional TransactionStatePB state = 2;

  optional fixed64 propagated_hybrid_time = 3;
}

message UpdateTransactionResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;

  optional fixed64 propagated_hybrid_time = 2;
}

message GetTransactionStatusRequestPB {
  optional bytes tablet_id = 1;
  repeated bytes transaction_id = 2;
  optional fixed64 propagated_hybrid_time = 3;
}

message GetTransactionStatusResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;

  repeated TransactionStatus status = 2;
  // For description of status_hybrid_time see comment in TransactionStatusResult.
  repeated fixed64 status_hybrid_time = 3;

  optional fixed64 propagated_hybrid_time = 4;

  repeated int64 num_replicated_batches = 5;
}

message GetTransactionStatusAtParticipantRequestPB {
  optional bytes tablet_id = 1;
  optional bytes transaction_id = 2;
  optional fixed64 propagated_hybrid_time = 3;
  optional int64 required_num_replicated_batches = 4;
}

message GetTransactionStatusAtParticipantResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;
  optional fixed64 propagated_hybrid_time = 2;
  optional int64 num_replicated_batches = 3;
  optional fixed64 status_hybrid_time = 4;
  optional bool aborted = 5;
}

message AbortTransactionRequestPB {
  optional bytes tablet_id = 1;
  optional bytes transaction_id = 2;
  optional fixed64 propagated_hybrid_time = 3;
}

message AbortTransactionResponsePB {
  // Error message, if any.
  optional TabletServerErrorPB error = 1;

  optional TransactionStatus status = 2;
  // For description of status_hybrid_time see comment in TransactionStatusResult.
  optional fixed64 status_hybrid_time = 3;

  optional fixed64 propagated_hybrid_time = 4;
}

message TakeTransactionRequestPB {
}

message TakeTransactionResponsePB {
  optional TransactionMetadataPB metadata = 1;
}
