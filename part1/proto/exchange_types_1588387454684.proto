

import "lib/protocol/entity.proto";
import "lib/protocol/exchange.proto";
package bnet.protocol.exchange;

message OrderBook {
  required .bnet.protocol.exchange.BlobOfType object = 1;
  required fixed32 program = 2;
  required uint32 compatibility = 3;
  required string currency = 4;
  required int32 specialist = 5;
  required uint32 allowed_realm = 6;
}

message OrderBookHandle {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required uint64 order_book_id = 2;
}

message OrderBookNotification {
  required .bnet.protocol.exchange.OrderBook order_book = 1;
  required .bnet.protocol.exchange.PartitionId partition_id = 2;
  required uint64 order_book_id = 3;
  optional uint64 trade_now_price = 4;
  required uint32 status = 5;
  required uint64 update_time = 6;
}

message OrderBookSummary {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required uint64 order_book_id = 2;
  required uint32 result = 3;
  optional .bnet.protocol.exchange.OrderBook order_book = 4;
  optional uint64 amount = 5;
  optional uint64 best_offer_price = 6;
  optional uint64 best_bid_price = 7;
  optional uint64 end_time = 8;
  optional int32 status = 9;
  optional uint64 created_time = 10;
  optional uint64 active_time = 11;
  optional uint64 closed_time = 12;
  optional uint32 reason = 13;
  optional uint64 out_bid_unit_price = 14;
}

message Order {
  required uint32 amount = 1;
  optional uint64 start_time = 2;
  optional uint64 end_time = 3;
  optional .bnet.protocol.exchange.BlobFrom account_for_money = 4;
  optional .bnet.protocol.exchange.BlobFrom account_for_item = 5;
  optional .bnet.protocol.EntityId bnet_account = 6;
  optional .bnet.protocol.EntityId game_account = 7;
  optional .bnet.protocol.EntityId toon = 8;
}

message Extension {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required uint64 order_book_id = 2;
  required uint64 order_id = 3;
  optional uint64 filled_amount = 4;
  optional int32 order_status = 5;
  optional uint64 authorized_time = 6;
  optional uint64 created_time = 7;
  optional uint64 closed_time = 8;
  optional uint32 reason = 9;
  optional .bnet.protocol.exchange.OrderBook order_book = 10;
  optional uint64 order_book_status = 11;
  optional uint64 money_to_claim = 12;
  optional uint64 items_to_claim = 13;
}

message Offer {
  required .bnet.protocol.exchange.Order order = 1;
  optional uint64 trade_now_price = 2;
  optional uint64 reserve_price = 3;
  optional uint64 out_bid_price = 4;
}

message OfferExtended {
  required .bnet.protocol.exchange.Offer offer = 1;
  required .bnet.protocol.exchange.Extension extension = 2;
  optional uint64 current_winning_price = 3;
}

message OfferCreation {
  required .bnet.protocol.exchange.Offer offer = 1;
  optional uint64 auction_duration = 2;
  optional uint64 auction_start_delay = 3;
  optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
}

message Bid {
  required .bnet.protocol.exchange.Order order = 1;
  optional uint64 current_unit_price = 2;
  optional uint64 max_unit_price = 3;
}

message BidExtended {
  required .bnet.protocol.exchange.Bid bid = 1;
  required .bnet.protocol.exchange.Extension extension = 2;
  optional uint64 offer_out_bid_price = 3;
  optional uint64 offer_trade_now_price = 4;
  optional uint64 offer_current_winning_price = 5;
}

message BidCreation {
  required .bnet.protocol.exchange.Bid bid = 1;
  optional uint64 auction_duration = 2;
  optional uint64 auction_start_delay = 3;
  optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
}

message QueryFilterByOrderId {
  required uint32 max_result = 1;
  optional uint64 ref_order_id = 2;
}

message QueryFilterByCreatedTime {
  required uint32 max_result = 1;
  optional uint64 ref_created_time = 2;
}

message Settlement {
  required uint64 order_book_id = 1;
  required uint64 money_amount = 2;
  required uint64 items_amount = 3;
  required uint64 offer_settle_id = 4;
}

message CurrencyConfig {
  required string currency = 1;
  required uint64 tick_size = 2;
  required uint64 flat_outbid_incr = 3;
  required uint64 scale_outbid_incr = 4;
  required uint64 min_starting_unit_price = 5;
  required uint64 max_starting_unit_price = 6;
  required uint64 max_unit_price = 7;
  required uint64 max_total_amount = 8;
  required int32 buyout_rule = 9;
}

message SpecialistConfig {
  required int32 specialist = 1;
  repeated uint64 auction_durations = 2;
  repeated uint64 auction_start_delays = 3;
  required uint64 anti_sniping_extension_delay = 4;
  repeated .bnet.protocol.exchange.CurrencyConfig currency_config = 5;
}

message BillingAddress {
  required int32 country_id = 1;
  required string city = 2;
  optional string state = 3;
  optional string postal_code = 4;
}

message FeeEstimationData {
  required fixed32 program = 1;
  required int32 specialist = 2;
  required string currency = 3;
  required fixed32 source = 4;
  required uint64 amount = 5;
  optional .bnet.protocol.EntityId bnet_account = 6;
  optional .bnet.protocol.exchange.BillingAddress billing_address = 7;
}

