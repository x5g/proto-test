
import "google/protobuf/csharp_options.proto";
import "lib/rpc/rpc.proto";
import "lib/protocol/exchange.proto";
import "lib/protocol/exchange_object_provider.proto";
import "lib/protocol/entity.proto";
import "service/exchange/exchange_types.proto";
package bnet.protocol.exchange;

option cc_generic_services = true;
option java_outer_classname = "CExchangeService";
option (google.protobuf.csharp_file_options).umbrella_classname = "ExchangeService";

message CreateOrderBookRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.OrderBook order_book = 2;
}

message CreateOrderBookResponse {
  optional uint64 order_book_id = 1;
}

message PlaceOfferOnOrderBookRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.OfferCreation offer_creation = 2;
}

message PlaceOfferOnOrderBookResponse {
  optional uint64 order_book_id = 1;
  optional uint64 offer_id = 2;
}

message PlaceOfferCreateOrderBookIfNeededRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.OrderBook order_book = 2;
  required .bnet.protocol.exchange.OfferCreation offer_creation = 3;
}

message PlaceOfferCreateOrderBookIfNeededResponse {
  optional uint64 order_book_id = 1;
  optional uint64 offer_id = 2;
}

message PlaceBidOnOrderBookRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.BidCreation bid_creation = 2;
}

message PlaceBidOnOrderBookResponse {
  optional uint64 order_book_id = 1;
  optional uint64 bid_id = 2;
}

message PlaceBidCreateOrderBookIfNeededRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.OrderBook order_book = 2;
  required .bnet.protocol.exchange.BidCreation bid_creation = 3;
}

message PlaceBidCreateOrderBookIfNeededResponse {
  optional uint64 order_book_id = 1;
  optional uint64 bid_id = 2;
}

message QueryOffersByOrderBookRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  required int32 status = 3;
}

message QueryOffersByOrderBookResponse {
  repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  required uint32 total_count = 2;
}

message QueryBidsByOrderBookRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  required int32 status = 3;
}

message QueryBidsByOrderBookResponse {
  repeated .bnet.protocol.exchange.BidExtended bids = 1;
  required uint32 total_count = 2;
}

message QueryOffersByAccountForItemRequest {
  required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
  required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
  optional .bnet.protocol.EntityId bnet_account = 3;
}

message QueryOffersByAccountForItemResponse {
  repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  required uint32 total_count = 2;
}

message QueryBidsByAccountForItemRequest {
  required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
  required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
  optional .bnet.protocol.EntityId bnet_account = 3;
}

message QueryBidsByAccountForItemResponse {
  repeated .bnet.protocol.exchange.BidExtended bids = 1;
  required uint32 total_count = 2;
}

message QueryOrderBooksSummaryRequest {
  repeated .bnet.protocol.exchange.OrderBookHandle handles = 1;
}

message QueryOrderBooksSummaryResponse {
  repeated .bnet.protocol.exchange.OrderBookSummary order_books = 1;
}

message QuerySettlementsByOrderBookRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
}

message QuerySettlementsByOrderBookResponse {
  repeated .bnet.protocol.exchange.Settlement settlements = 1;
}

message SubscribeOrderBookStatusChangeRequest {
  required uint64 object_id = 1;
  required .bnet.protocol.exchange.PartitionId min_partition_id = 2;
  required .bnet.protocol.exchange.PartitionId max_partition_id = 3;
  required fixed32 program = 4;
  required int32 status = 5;
  optional string currency = 6;
  optional int32 specialist = 7;
  optional bool bootstrap = 8;
}

message UnsubscribeOrderBookStatusChangeRequest {
}

message SubscribeOrderStatusChangeRequest {
  required .bnet.protocol.EntityId agent_id = 1;
  required uint64 object_id = 2;
}

message UnsubscribeOrderStatusChangeRequest {
  required .bnet.protocol.EntityId agent_id = 1;
  required uint64 object_id = 2;
}

message ClaimRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required uint32 order_id = 2;
  optional .bnet.protocol.EntityId bnet_account = 3;
}

message CancelRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required uint32 order_id = 2;
  optional uint32 reason = 3;
  optional .bnet.protocol.EntityId bnet_account = 4;
}

message GetConfigurationRequest {
  required fixed32 program = 1;
}

message GetConfigurationResponse {
  repeated .bnet.protocol.exchange.SpecialistConfig configs = 1;
}

message GetOfferFeeEstimationRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.FeeEstimationData data = 2;
}

message GetBidFeeEstimationRequest {
  required .bnet.protocol.exchange.PartitionId partition_id = 1;
  required .bnet.protocol.exchange.FeeEstimationData data = 2;
}

message GetFeeEstimationResponse {
  optional uint64 fee_amount = 1;
}

message OrderBookNotificationRequest {
  repeated .bnet.protocol.exchange.OrderBookNotification notifications = 1;
  optional bool boot_strap_last = 2;
}

message OfferNotificationRequest {
  required .bnet.protocol.exchange.OfferExtended offer = 1;
  required uint32 event = 2;
}

message BidNotificationRequest {
  required .bnet.protocol.exchange.BidExtended bid = 1;
  required uint32 event = 2;
}

service ExchangeService {
  rpc CreateOrderBook(.bnet.protocol.exchange.CreateOrderBookRequest) returns (.bnet.protocol.exchange.CreateOrderBookResponse);
  rpc PlaceOfferOnOrderBook(.bnet.protocol.exchange.PlaceOfferOnOrderBookRequest) returns (.bnet.protocol.exchange.PlaceOfferOnOrderBookResponse);
  rpc PlaceOfferCreateOrderBookIfNeeded(.bnet.protocol.exchange.PlaceOfferCreateOrderBookIfNeededRequest) returns (.bnet.protocol.exchange.PlaceOfferCreateOrderBookIfNeededResponse);
  rpc PlaceBidOnOrderBook(.bnet.protocol.exchange.PlaceBidOnOrderBookRequest) returns (.bnet.protocol.exchange.PlaceBidOnOrderBookResponse);
  rpc PlaceBidCreateOrderBookIfNeeded(.bnet.protocol.exchange.PlaceBidCreateOrderBookIfNeededRequest) returns (.bnet.protocol.exchange.PlaceBidCreateOrderBookIfNeededResponse);
  rpc QueryOffersByOrderBook(.bnet.protocol.exchange.QueryOffersByOrderBookRequest) returns (.bnet.protocol.exchange.QueryOffersByOrderBookResponse);
  rpc QueryBidsByOrderBook(.bnet.protocol.exchange.QueryBidsByOrderBookRequest) returns (.bnet.protocol.exchange.QueryBidsByOrderBookResponse);
  rpc QueryOffersByAccountForItem(.bnet.protocol.exchange.QueryOffersByAccountForItemRequest) returns (.bnet.protocol.exchange.QueryOffersByAccountForItemResponse);
  rpc QueryBidsByAccountForItem(.bnet.protocol.exchange.QueryBidsByAccountForItemRequest) returns (.bnet.protocol.exchange.QueryBidsByAccountForItemResponse);
  rpc QueryOrderBooksSummary(.bnet.protocol.exchange.QueryOrderBooksSummaryRequest) returns (.bnet.protocol.exchange.QueryOrderBooksSummaryResponse);
  rpc QuerySettlementsByOrderBook(.bnet.protocol.exchange.QuerySettlementsByOrderBookRequest) returns (.bnet.protocol.exchange.QuerySettlementsByOrderBookResponse);
  rpc ReportAuthorize(.bnet.protocol.exchange_object_provider.ReportAuthorizeRequest) returns (.bnet.protocol.NoData);
  rpc ReportSettle(.bnet.protocol.exchange_object_provider.ReportSettleRequest) returns (.bnet.protocol.NoData);
  rpc ReportCancel(.bnet.protocol.exchange_object_provider.ReportCancelRequest) returns (.bnet.protocol.NoData);
  rpc SubscribeOrderBookStatusChange(.bnet.protocol.exchange.SubscribeOrderBookStatusChangeRequest) returns (.bnet.protocol.NoData);
  rpc UnsubscribeOrderBookStatusChange(.bnet.protocol.exchange.UnsubscribeOrderBookStatusChangeRequest) returns (.bnet.protocol.NoData);
  rpc SubscribeOrderStatusChange(.bnet.protocol.exchange.SubscribeOrderStatusChangeRequest) returns (.bnet.protocol.NoData);
  rpc UnsubscribeOrderStatusChange(.bnet.protocol.exchange.UnsubscribeOrderStatusChangeRequest) returns (.bnet.protocol.NoData);
  rpc GetPaymentMethods(.bnet.protocol.exchange_object_provider.GetPaymentMethodsRequest) returns (.bnet.protocol.exchange_object_provider.GetPaymentMethodsResponse);
  rpc ClaimBidItem(.bnet.protocol.exchange.ClaimRequest) returns (.bnet.protocol.NoData);
  rpc ClaimBidMoney(.bnet.protocol.exchange.ClaimRequest) returns (.bnet.protocol.NoData);
  rpc ClaimOfferItem(.bnet.protocol.exchange.ClaimRequest) returns (.bnet.protocol.NoData);
  rpc ClaimOfferMoney(.bnet.protocol.exchange.ClaimRequest) returns (.bnet.protocol.NoData);
  rpc CancelBid(.bnet.protocol.exchange.CancelRequest) returns (.bnet.protocol.NoData);
  rpc CancelOffer(.bnet.protocol.exchange.CancelRequest) returns (.bnet.protocol.NoData);
  rpc GetConfiguration(.bnet.protocol.exchange.GetConfigurationRequest) returns (.bnet.protocol.exchange.GetConfigurationResponse);
  rpc GetBidFeeEstimation(.bnet.protocol.exchange.GetBidFeeEstimationRequest) returns (.bnet.protocol.exchange.GetFeeEstimationResponse);
  rpc GetOfferFeeEstimation(.bnet.protocol.exchange.GetOfferFeeEstimationRequest) returns (.bnet.protocol.exchange.GetFeeEstimationResponse);
}

service ExchangeNotify {
  rpc NotifyOrderBookStatusChange(.bnet.protocol.exchange.OrderBookNotificationRequest) returns (.bnet.protocol.NO_RESPONSE);
  rpc NotifyOfferStatusChange(.bnet.protocol.exchange.OfferNotificationRequest) returns (.bnet.protocol.NO_RESPONSE);
  rpc NotifyBidStatusChange(.bnet.protocol.exchange.BidNotificationRequest) returns (.bnet.protocol.NO_RESPONSE);
}

