syntax = "proto3";
package TiMatrix.ai_studio;
option go_package = "pb3/TiMatrix/ai_studio";
import "google/api/annotations.proto";

message RegisterWorkerReq {
    string url = 1 [json_name = "Url"]; //appid
    string ip = 2 [json_name = "Ip"]; 
    int64 port = 3 [json_name = "Port"]; 
    string worker_name = 4 [json_name = "WorkerName"]; 
}

message RegisterWorkerRsp {
    //错误不需在返回包中定义,通过grpc的error直接返回
    string worker_name = 1 [json_name = "WorkerName"];
}

message handler{
    string realname = 1;
    string session = 2;
}

message SyncHandlersReq {
    string url = 1 [json_name = "Url"]; //appid
    string ip = 2 [json_name = "Ip"]; 
    int64 port = 3 [json_name = "Port"]; 
    string worker_name = 4 [json_name = "WorkerName"]; 
    map<string, handler> handlers = 5 [json_name = "Handlers"];
}

message SyncHandlersRsp {
    //错误不需在返回包中定义,通过grpc的error直接返回
    string worker_name = 1 [json_name = "WorkerName"];
}

message DeleteUserServiceReq {
    string service_name = 1 [json_name = "ServiceName"];
    string uin = 2 [json_name = "Uin"];
}

message DeleteUserServiceRsp {
    //错误不需在返回包中定义,通过grpc的error直接返回
}

message CreateUserServiceReq{
    string service_name = 1 [json_name = "ServiceName"];
    string service_code = 2 [json_name = "ServiceCode"];
    string uin = 3 [json_name = "Uin"];
}

message CreateUserServiceRsp{
    string service_name = 1 [json_name = "ServiceName"];
}

message Filter {
    string name = 1 [json_name="Name"];
    repeated string values = 2 [json_name="Values"];
}

message DescribeUserServiceReq{
    int64 Offset = 1;
    int64 Limit = 2;
    repeated Filter filters=3 [json_name="Filters"];
}

message UserService{
    int64 id = 1 [json_name="Id"];
    string service_name = 2 [json_name="ServcieName"];
    string service_code = 3 [json_name="ServcieCode"];
    string uin = 4 [json_name="Uin"];
    string session_id = 5 [json_name="SessionId"];
    string worker_name = 6 [json_name="WorkerName"];
    string create_time = 7 [json_name="CreateTime"];
}

message DescribeUserServiceRsp{
    repeated UserService services = 1 [json_name="Services"];
}

service ServerLessMaster {
    // 内部调用
    rpc RegisterWorker (RegisterWorkerReq) returns (RegisterWorkerRsp) {
        option (google.api.http) = { 
                post:"/RegisterWorker"
                body:"*"
            };
    }

    // 内部调用
    rpc SyncHandlers (SyncHandlersReq) returns (SyncHandlersRsp) {
        option (google.api.http) = { 
                post:"/SyncHandlers"
                body:"*"
            };
    }

    rpc CreateUserService (CreateUserServiceReq) returns (CreateUserServiceRsp) {
        option (google.api.http) = { 
                post:"/CreateUserService"
                body:"*"
            };
    }


    rpc DeleteUserService (DeleteUserServiceReq) returns (DeleteUserServiceRsp) {
        option (google.api.http) = { 
                post:"/DeleteUserService"
                body:"*"
            };
    }

    rpc DescribeUserService (DescribeUserServiceReq) returns (DescribeUserServiceRsp) {
        option (google.api.http) = { 
                post:"/DescribeUserService"
                body:"*"
            };
    }
}
