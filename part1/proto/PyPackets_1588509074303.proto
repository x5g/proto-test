syntax = "proto2";

package PyPacket;

// --------------
// Helper Classes
// --------------

//3 Element Vector
message Vector3 {
	required float x = 1;
	required float y = 2;
	required float z = 3;
}

message Battery{
	required float voltage = 1;
	optional float current = 2;
	optional float level = 3;
}

message Waypoint{
	required Vector3 Pos = 1;
	required string frame = 2; //(NED, ENU, LLA) 
	optional float cost = 3; //for planning purposes
	optional float costF1 = 4; //from half
	optional float costF2 = 5; //from half
}

message Node {
	required string ID = 1;
	required string dataType = 2; 
	required string commType = 3;
	required string address = 4;
	required string port = 5;
	optional string NMID = 6; //ID of the network Manger associated with controlling said node
}

//Helper containing the information to build Subscriber Objects
message Subscriber{
	required string id = 1;
	required string datatype = 2;
	required uint32 port = 3;
	required string address = 4; //SHOULD PROBABLY CHANGE THIS
	required float msgfreq = 5; //In Hz
}

message NetworkManagers{
	required string IP = 1;
	required string PORT = 2; 
}

// -------------------------
//   Network Manager Messages
// -------------------------
message NMHeartBeat{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	repeated Subscriber sub = 4; //Populates with its own internal list of subscribers (switches Address and Port with its own)
	repeated NetworkManagers nms = 5; //to send a list of Network Managers; so atleast 1 can be updated or knows of others
}

message NodeHeartBeat{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	repeated Subscriber sub = 4;
}

message NMStatus{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	//What do we want to have 
	required uint32 numberOfMsgs = 4; //How many messages since last update 
	required double avgTimeDelay = 5; //Avg time delay of messages in the NWM
	required uint32 totalMsgsRcv = 6;  //How many messages since start of program
	repeated Subscriber subs = 7; //List of all local subscribers
	//Add publishers at some point
	required uint32 messagesInQue = 8;
	required uint32 numberOfLocalSubscribers = 9;
	optional uint32 numberOfGlobalSubscribers = 10; //inclusive of local subscribers
	//repeated Subscriber globalSubs = 11;
}

// -------------------------
//  PyPacket Test Message
// -------------------------

message dummy_msg{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	required string s = 4;
	optional string s2 = 5;
	optional string s3 = 6;
}

// -------------------------
//  State Messages
// -------------------------
message AircraftPixhawkState{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	
	required Vector3 LLA_Pos = 4; //lat, lon, alt
	required Vector3 velocity = 5; //NED Frame [m/s]
	required Vector3 attitude = 6; //Euler Angles [rad]
	optional Vector3 omega = 7; //angular velocities [rad/s]
	optional float airspeed = 8; //[m/s]
	
	required string mode = 9; //Mode of the aircraft
	optional float distance_to_mav = 10;
	
	optional Battery batteryStatus = 11; //current battery information 
	optional Waypoint currentWaypoint = 12; //current waypoint in mission plan
}
// -------------------------
//  Command Messages
// -------------------------
message RF_Learn_Cmd{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	
	repeated string NodesToLearn = 4;
	//We need something to say which nodes to plot 
	required string calculateWaypointFlag = 5;
	repeated string NodesToPlan = 6;
	
	optional string mode = 7; //the mode to learn is either Error or Full 
}

// -------------------------
// Sensor Messages
// -------------------------

//Pressure
//Temperature
//Humidity
message PTH{
	required float pressure = 1;
	required float temperature = 2;
	required float humidity = 3; 
}

message SensorLocation{
	required Vector3 LLA = 1;
	required Vector3 ENU = 2;
}

message RFSensorMsg{
	required float path_loss = 1;
	required float rss = 2;
	optional uint32 packetNum = 3;
}

message RFNode{
	required string chanID = 1; //channel ID number
	required float rssi = 2; //RSSI of channel
	required float pl_msr = 3; //calculated "measured" path loss
	required float pl_error = 4; //PL error between predicted and measured
	optional uint32 xgridNum = 5; //x grid number in the prediction field
	optional uint32 ygridNum = 6; //y grid number in the prediction field
	optional float rssi2 = 7; //Second channel for RF measurements 
	optional float rssiRaw = 8; //raw output from wahtever the sensor is
	optional float rssiRaw2 = 9; // raw output from whatever the sensor is 
}

message RFMapGrid{
	required uint32 xgridNum = 1;
	required uint32 ygridNum = 2;
	required float est_path_loss = 3; //estimated path loss (combined err and prediction)
	optional float path_loss_err = 4; // Learned path loss error
	optional float pred_path_loss = 5; //Path loss predicted from model
}

//Message used to send the measured/sensed data at a given point
message RF_Data_Msg{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	
	required Vector3 lla = 4;
	optional Vector3 attitude = 5;
	optional double airspeed = 6;
	
	repeated RFNode rfNode = 7;
}

//Message used to send the results of the Map estimation system
message RF_PL_Map_Msg{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	
	required uint32 gp_iteration_number = 4; //what iteration was this
	required uint32 xGrids = 5; //specifications of the map size  
	required uint32 yGrids = 6;
	required uint32 xSpacing = 7;
	required uint32 ySpacing = 8; 
	repeated RFMapGrid cell = 9; //For each cell in the map
	
	optional Vector3 centerPointLLA = 10; //center point for the map
	optional float gp_learning_time = 11; //how long it took to learn the hyper parameters
	optional float gp_prediction_time = 12; //how long it took to predict using the hyper parameters
}

message RF_Stacked_Map_Msg{
	repeated RF_PL_Map_Msg mapMsg = 1;
}

//Message for Lagragian Drifter Project Balloons
message Balloon_Sensor_Msg{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	
	required PTH pthsensor = 4;
	required Vector3 LLA_Pos = 5;
	required Battery battery = 6;
	
	optional float rssi = 7; 
	optional Vector3 Vel = 8;
}

message Balloon_Sensor_Set_Msg{
	required uint32 packetNum = 1;
	required string ID = 2;
	required double time = 3;
	
	repeated Balloon_Sensor_Msg balloon = 4;
	required uint32 NumberOfBalloons = 5;
	
	optional Vector3 receiverLLA_Pos = 6;
}
